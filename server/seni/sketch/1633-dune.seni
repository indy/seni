(meta linear-colour-space: 1)


(define
  coords1 [[-384.501 -98.136]
           [329.109 479.700]
           [-379.652 -248.992]
           [-408.700 443.968]] ~
  (gen/2d min: -500 max: 500)
  coords2 [[160.088 -124.315]
           [-291.133 -357.968]
           [290.588 432.570]
           [442.875 475.219]] ~
  (gen/2d min: -500 max: 500)
  coords3 [[115.066 -95.138]
           [-485.132 -200.796]
           [-367.920 285.440]
           [422.032 -212.102]] ~
  (gen/2d min: -500 max: 500)

  col-fn-1 (col/build-procedural a: [0.525 0.911 0.163] ~ (gen/scalar)
                                 b: [0.091 0.084 0.211] ~ (gen/scalar)
                                 c: [0.211 0.804 0.624] ~ (gen/scalar)
                                 d: [0.498 0.672 0.286] ~ (gen/scalar)
                              alpha: 0.08)
  col-fn-2 (col/build-procedural a: [0.265 0.977 0.017] ~ (gen/scalar)
                                 b: [0.737 0.981 0.656] ~ (gen/scalar)
                                 c: [0.029 0.116 0.078] ~ (gen/scalar)
                                 d: [0.046 0.362 0.756] ~ (gen/scalar)
                              alpha: 0.08)
  col-fn-3 (col/build-procedural a: [0.897 0.589 0.075] ~ (gen/scalar)
                                 b: [0.561 0.365 0.110] ~ (gen/scalar)
                                 c: [0.635 0.130 0.463] ~ (gen/scalar)
                                 d: [0.481 0.974 0.761] ~ (gen/scalar)
                              alpha: 0.08))

(fn (draw)
    (fence (t num: 200)
    (poly coords: [(interp/bezier t: t coords: coords1)
                   (interp/bezier t: t coords: coords2)
                   (interp/bezier t: t coords: coords3)]
          colours: [(col/value from: col-fn-1 t: t)
                    (col/value from: col-fn-2 t: t)
                    (col/value from: col-fn-3 t: t)])))

(fn (render)
    (wash colour: (col/rgb r: 0.127 g: 0.791 b: 0.743 alpha: 0.740) ~ (gen/col))
  (on-matrix-stack
    (translate vector: [(/ canvas/width 1) (/ canvas/height 2)])
    (scale scalar: 2)
    (repeat/rotate-mirrored fn: (address-of draw)
                            copies: 2 ~ (gen/int min: 1 max: 30))))

(render)

(fn (wash vol: 200
          line-width: 70
          line-segments: 5
          colour: (col/rgb r: 0.627 g: 0.627 b: 0.627 alpha: 0.4)
          seed: 272)
  (define
    w/3 (/ canvas/width 3)
    h/3 (/ canvas/height 3))
  (loop (d from: -20 to: 1020 inc: 20)
    (bezier tessellation: line-segments
            line-width: line-width
            coords: [[0            (wash-n x: 0            d: d seed: seed vol: vol)]
                     [w/3          (wash-n x: w/3          d: d seed: seed vol: vol)]
                     [(* w/3 2)    (wash-n x: (* w/3 2)    d: d seed: seed vol: vol)]
                     [canvas/width (wash-n x: canvas/width d: d seed: seed vol: vol)]]
            colour: colour)

    (bezier tessellation: line-segments
            line-width: line-width
            coords: [[(wash-n x: 0             d: d seed: seed vol: vol) 0]
                     [(wash-n x: h/3           d: d seed: seed vol: vol) h/3]
                     [(wash-n x: (* h/3 2)     d: d seed: seed vol: vol) (* h/3 2)]
                     [(wash-n x: canvas/height d: d seed: seed vol: vol) canvas/height]]
            colour: colour)))

(fn (wash-n x: 0 d: 0 seed: 0 vol: 1)
  (+ d (* vol (prng/perlin x: x y: d z: seed))))
