(image linear-colour-space: 1)


(define
  texture "skull-a.png"
  bmx (interp/build from: [0 canvas/width] to: [0 (bitmap/width from: texture)])
  bmy (interp/build from: [0 canvas/height] to: [0 (bitmap/height from: texture)]))

(on-matrix-stack
  (scale scalar: 1.1)
  (rotate angle: 3)
  (wash colour: (col/rgb r: 0.70 g: 0.70 b: 0.93 alpha: 0.17) ~ (gen/col)))

(on-matrix-stack
  (scale scalar: 1.05)
  (tri-hsl alpha: 0.490 ~ (gen/scalar))
  (tri-lab alpha: 0.337 ~ (gen/scalar)))

(define
  ra (prng/build seed: 42
                 min: -2.411 ~ (gen/stray from: -4 by: 4)
                 max: 6.410 ~ (gen/stray from: 4 by: 4))
  sc 0.835 ~ (gen/scalar min: 0.8 max: 1.1)
  wh 8 ~ (gen/int min: 5 max: 20)
  w wh
  h wh)

(fn (left x: 0 y: 0 w: 0 h: 0 colour: red)
  (poly coords: [[(- x w) (+ y h h)]
                 [(+ x w) (+ y h)]
                 [(- x w) (+ y 0)]
                 [(+ x w) (- y h)]]
        colours: [colour colour colour colour]))

(fn (right x: 0 y: 0 w: 0 h: 0 colour: red)
  (poly coords: [[(+ x w) (+ y h h)]
                 [(- x w) (+ y h)]
                 [(+ x w) (+ y 0)]
                 [(- x w) (- y h)]]
        colours: [colour colour colour colour]))

(fn (left-side x: 0 y: 0 w: 0 h: 0 colour: red strength: 1)
  (define col (col/set-alpha value: strength
                          from: (col/set-e1 value: (* 100 strength)
                                            from: (col/convert format: HSLuv from: colour))))
  (on-matrix-stack
    (translate vector: [x y])
    (rotate angle: (prng/value from: ra))
    (left x: 0 y: 0 w: w h: h colour: col)
    (loop (i to: 3)
      (scale scalar: sc)
      (rotate angle: (prng/value from: ra))
      (left x: 0 y: 0 w: w h: h colour: col))))

(fn (right-side x: 0 y: 0 w: 0 h: 0 colour: red strength: 1)
  (define col (col/set-alpha value: strength
                          from: (col/set-e1 value: (* 100 strength)
                                            from: (col/convert format: HSLuv from: colour))))
  (on-matrix-stack
    (translate vector: [x y])
    (rotate angle: (prng/value from: ra))
    (right x: 0 y: 0 w: w h: h colour: col)
    (loop (i to: 3)
      (scale scalar: sc)
      (rotate angle: (prng/value from: ra))
      (right x: 0 y: 0 w: w h: h colour: col))))

(fn (tri-lab alpha: 1)
  (define
    y 400
    r (prng/build min: 0 max: 1 seed: 231)
    colour-scale 777 ~ (gen/int min: 700 max: 900)
    colour-offset (prng/build min: -1 max: 1)
    li (interp/build from: [0 1]
                     to: [40 ~ (gen/int min: 40 max: 120)
                             43 ~ (gen/int min: 0 max: 70)])
    rma (interp/build from: [0 canvas/width]
                      to: [-8 ~ (gen/int min: -10 max: 30)
                              -6 ~ (gen/int min: -10 max: 30)])
    rmb (interp/build from: [0 canvas/height]
                      to: [107 ~ (gen/int min: 60 max: 120)
                               51 ~ (gen/int min: 0 max: 60)]))

  (loop (y from: 0 to: canvas/height inc: (* 2 h))
    (loop (x from: 0 to: canvas/width inc: (* 4 w))
      (define
        col-bm (bitmap/value from: texture position: [(interp/value from: bmx t: x)
                                                      (interp/value from: bmy t: y)])
        b (interp/value from: rmb t: (+ y (* (prng/value from: colour-offset) colour-scale)))
        col-1 (col/lab l: (interp/value from: li t: (prng/value from: r))
                       a: (interp/value from: rma t: (+ x (* (prng/value from: colour-offset) colour-scale)))
                       b: b
                       alpha: alpha)
        col-2 (col/lab l: (interp/value from: li t: (prng/value from: r))
                       a: (interp/value from: rma t: (+ x w (* (prng/value from: colour-offset) colour-scale)))
                       b: b
                       alpha: alpha))
      (left-side  x: x         y: y w: w h: h colour: col-1 strength: (col/e0 from: col-bm))
      (right-side x: (+ x w w) y: y w: w h: h colour: col-2 strength: (col/e0 from: col-bm)))))

(fn (tri-hsl alpha: 1)
  (define
    colour-scale 542 ~ (gen/int min: 400 max: 600)
    colour-offset (prng/build min: -1 max: 1)
    fn-h (interp/build from: [0 canvas/width]
                       to: [312 ~ (gen/int min: 200 max: 360)
                                249 ~ (gen/int min: 100 max: 300)])
    fn-l (interp/build from: [0 canvas/height]
                       to: [0.289 ~ (gen/scalar min: 0.2 max: 0.4)
                                  0.806 ~ (gen/scalar min: 0.7 max: 1)]))

  (loop (y from: 0 to: canvas/height inc: (* 2 h))
    (loop (x from: 0 to: canvas/width inc: (* 4 w))
      (define
        col-bm (bitmap/value from: texture position: [(interp/value from: bmx t: x)
                                                      (interp/value from: bmy t: y)])
        b  (interp/value from: fn-l t: (+ y (* (prng/value from: colour-offset) colour-scale)))
        col-1 (col/hsl h: (interp/value from: fn-h t: (+ x (* (prng/value from: colour-offset) colour-scale)))
                       s: 1 l: b alpha: alpha)
        col-2 (col/hsl h: (interp/value from: fn-h t: (+ x w (* (prng/value from: colour-offset) colour-scale)))
                       s: 1 l: b alpha: alpha))
      (left-side  x: x         y: y w: w h: h colour: col-1 strength: (col/e0 from: col-bm))
      (right-side x: (+ x w w) y: y w: w h: h colour: col-2 strength: (col/e0 from: col-bm)))))


(fn (wash vol: 200
          line-width: 70
          line-segments: 5
          colour: (col/rgb r: 0.627 g: 0.627 b: 0.627 alpha: 0.4)
          seed: 272)
  (define
    w/3 (/ canvas/width 3)
    h/3 (/ canvas/height 3))
  (loop (d from: -20 to: 1020 inc: 20)
    (bezier tessellation: line-segments
            line-width: line-width
            coords: [[0            (wash-n x: 0            d: d seed: seed vol: vol)]
                     [w/3          (wash-n x: w/3          d: d seed: seed vol: vol)]
                     [(* w/3 2)    (wash-n x: (* w/3 2)    d: d seed: seed vol: vol)]
                     [canvas/width (wash-n x: canvas/width d: d seed: seed vol: vol)]]
            colour: colour)

    (bezier tessellation: line-segments
            line-width: line-width
            coords: [[(wash-n x: 0             d: d seed: seed vol: vol) 0]
                     [(wash-n x: h/3           d: d seed: seed vol: vol) h/3]
                     [(wash-n x: (* h/3 2)     d: d seed: seed vol: vol) (* h/3 2)]
                     [(wash-n x: canvas/height d: d seed: seed vol: vol) canvas/height]]
            colour: colour)))

(fn (wash-n x: 0 d: 0 seed: 0 vol: 1)
  (+ d (* vol (prng/perlin x: x y: d z: seed))))
