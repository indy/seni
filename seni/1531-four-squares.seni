(wash colour: (col/rgb r: 0.827 g: 0.827 b: 0.827 alpha: 0.4)
      seed: 88)

(define 
  base-colour (col/rgb r: 0.9 g: 0.0 b: 0.0 alpha: 1.0)
  border 30
  square-size (/ (- canvas/width (* 3 border)) 2)
  square-radius (/ square-size 2)
  square-pos-min (+ border square-radius)
  square-pos-max (- canvas/width (+ border square-radius)))

(rect position: [square-pos-min square-pos-max]
      width: square-size height: square-size
      colour: base-colour)

(accumulated-rect position: [square-pos-max square-pos-max]
                  width: square-size height: square-size
                  colour: base-colour
                  volatility: 1.5
                  passes: 50)

(stroked-bezier-rect position: [square-pos-min square-pos-min]
                     width: square-size
                     height: square-size
                     colour: base-colour
                     volatility: 10.0
                     overlap: 3.0)

(stroked-bezier-rect position: [square-pos-max square-pos-min]
                     width: square-size
                     height: square-size
                     colour: base-colour
                     colour-volatility: 10
                     volatility: 10.0
                     overlap: 3.0
                     iterations: 79)

(fn (accumulated-rect position: [0 0]
                      width: 10
                      height: 10
                      colour: (col/rgb r: 0.0 g: 1.0 b: 0.0 alpha: 0.5)
                      volatility: 0
                      passes: 1
                      seed: 33)
    (define 
      alpha (col/get-alpha colour: colour)
      pass-colour (col/set-alpha colour: colour value: (/ alpha passes))
      rng (prng/range min: -1 max: 1 seed: seed))

    (on-matrix-stack
      (translate vector: position)
      (loop (i to: passes)
        (define (rr xr yr) (take num: 3 from: rng))
        (on-matrix-stack
          (rotate angle: (radians->degrees angle: (* rr 0.02 volatility)))
          (rect position: [(* xr 5 volatility) (* yr 5 volatility)]
                width: width
                height: height
                colour: pass-colour)))))

(fn (stroked-bezier-rect position: [0 0]
                         width: 10
                         height: 10
                         colour: (col/rgb r: 0.0 g: 1.0 b: 0.0 a: 0.5)
                         colour-volatility: 0
                         volatility: 0
                         overlap: 3
                         iterations: 10
                         seed: "shabba")
    (define 
      x (v2/x position)
      y (v2/y position)
      third-width (/ width 3)
      third-height (/ height 3)
      vol volatility

      start-x (- x (/ width 2))
      start-y (- y (/ height 2))

      h-delta (/ height iterations)
      h-strip-width (/ height iterations)
      half-h-strip-width (/ h-strip-width 2)

      v-delta (/ width iterations)
      v-strip-width (/ width iterations)
      half-v-strip-width (/ v-strip-width 2)

      rng (prng/range min: -1 max: 1 seed: seed)

      half-alpha (/ (col/get-alpha colour: colour) 2)
      lab-colour (col/set-alpha colour: (col/convert format: LAB
                                                     colour: colour)
                                value: half-alpha))

    ; horizontal strips
    (loop (i to: iterations)
      (define 
        (rx1 ry1 rx2 ry2 rx3 ry3 rx4 ry4) (take num: 8 from: rng)
        lightness (+ (col/get-lab-l colour: lab-colour)
                     (* colour-volatility (take from: rng)))
        current-colour (col/set-lab-l colour: lab-colour
                                      value: lightness))
      (bezier tessellation: 10
              line-width: (+ overlap h-strip-width)
              coords: [[(+ (+ (* rx1 vol) start-x)
                           (* 0 third-width))
                        (+ (+ (* i h-delta) (* ry1 vol) start-y)
                           half-h-strip-width)]

                       [(+ (+ (* rx2 vol) start-x)
                           (* 1 third-width))
                        (+ (+ (* i h-delta) (* ry2 vol) start-y)
                           half-h-strip-width)]

                       [(+ (+ (* rx3 vol) start-x)
                           (* 2 third-width))
                        (+ (+ (* i h-delta) (* ry3 vol) start-y)
                           half-h-strip-width)]

                       [(+ (+ (* rx4 vol) start-x)
                           (* 3 third-width))
                        (+ (+ (* i h-delta) (* ry4 vol) start-y)
                           half-h-strip-width)]]
              colour: current-colour))

    ; vertical strips
    (loop (i to: iterations)
      (define 
        (rx1 ry1 rx2 ry2 rx3 ry3 rx4 ry4) (take num: 8 from: rng)
        lightness (+ (col/get-lab-l colour: lab-colour)
                     (* colour-volatility (take from: rng)))
        current-colour (col/set-lab-l colour: lab-colour
                                      value: lightness))
      (bezier tessellation: 10
              line-width: (+ overlap v-strip-width)
              coords: [[(+ (+ (* i v-delta) (* rx1 vol) start-x)
                           half-v-strip-width)
                        (+ (+ (* ry1 vol) start-y)
                           (* 0 third-height))]

                       [(+ (+ (* i v-delta) (* rx2 vol) start-x)
                           half-v-strip-width)
                        (+ (+ (* ry2 vol) start-y)
                           (* 1 third-height))]

                       [(+ (+ (* i v-delta) (* rx3 vol) start-x)
                           half-v-strip-width)
                        (+ (+ (* ry3 vol) start-y)
                           (* 2 third-height))]

                       [(+ (+ (* i v-delta) (* rx4 vol) start-x)
                           half-v-strip-width)
                        (+ (+ (* ry4 vol) start-y)
                           (* 3 third-height))]]
              colour: current-colour)))

(fn (wash variation: 200
          line-width: 70
          line-segments: 5
          colour: (col/rgb r: 0.627 g: 0.627 b: 0.627 alpha: 0.4)
          seed: 272)

    (fn (v x: 0 y: 0 z: 0 scale: 1)
        (+ y (* scale (prng/perlin-signed x: x y: y z: z))))

    (define 
      w/3 (/ canvas/width 3)
      h/3 (/ canvas/height 3))
    (loop (h from: -20 to: 1020 increment: 20)
      (bezier tessellation: line-segments
              line-width: line-width
              coords: [[0 (v x: 0 y: h z: seed scale: variation)]
                       [w/3 (v x: w/3 y: h z: seed scale: variation)]
                       [(* w/3 2) (v x: (* w/3 2) y: h z: seed scale: variation)]
                       [canvas/width (v x: canvas/width y: h z: seed scale: variation)]]
              colour: colour)

      (bezier tessellation: line-segments
              line-width: line-width
              coords: [[(v x: 0 y: h z: seed scale: variation) 0]
                       [(v x: h/3 y: h z: seed scale: variation) h/3]
                       [(v x: (* h/3 2) y: h z: seed scale: variation) (* h/3 2)]
                       [(v x: canvas/height y: h z: seed scale: variation) canvas/height]]
              colour: colour)))
