(define-vars
 coords1 (list (v2 [  0 (int min: -300 max: 300)]
                   [200 (int min: -300 max: 300)])
               (v2 [-133 (int min: -300 max: 300)]
                   [100 (int min: -300 max: 300)])
               (v2 [266 (int min: -300 max: 300)]
                   [-100 (int min: -300 max: 300)])
               (v2 [399 (int min: -300 max: 300)]
                   [-200 (int min: -300 max: 300)]))
 coords2 (list (v2 [-100 (int min: -300 max: 300)]
                   [200 (int min: -300 max: 300)])
               (v2 [133 (int min: -300 max: 300)]
                   [-300 (int min: -300 max: 300)])
               (v2 [66 (int min: -300 max: 300)]
                   [100 (int min: -300 max: 300)])
               (v2 [-99 (int min: -300 max: 300)]
                   [200 (int min: -300 max: 300)]))
 coords (list)
 colours (list)
 make-colour (col/procedural-fn a: [(col/rgb r: 0.80 g: 0.50 b: 0.40 a: 0.2) (col)]
                                b: [(col/rgb r: 0.20 g: 0.40 b: 0.20 a: 0.3) (col)]
                                c: [(col/rgb r: 2.00 g: 1.00 b: 1.00 a: 0.4) (col)]
                                d: [(col/rgb r: 0.00 g: 0.25 b: 0.25 a: 0.5) (col)])

 focalpoint ([focal/point (select from: (list 'focal/point
                                              'focal/hline
                                              'focal/vline))] 
             position: (v2 [0 (int min: -300 max: 300)] 
                           [0 (int min: -300 max: 300)])
             distance: [390 (int min: 300 max: 900)]))



(loop (t from: 0 to: 1 steps: [30 (int min: 5 max: 100)])
  (define-vars
   p1 (interp/bezier t: t coords: coords1)
   p2 (interp/bezier t: t coords: coords2))
  (append coords p1 
                 p2)
  (append colours (make-colour t: (focalpoint position: p1))
                  (make-colour t: (focalpoint position: p2))))


(define (draw)
  (poly coords: coords colours: colours))

(define (render)
  (on-matrix-stack
    (translate vector: (v2 (/ canvas/width 2) (/ canvas/height 2)))
    (repeat/rotate-mirrored draw: draw
                            copies: [5 (int min: 1 max: 30)])))

(render)
