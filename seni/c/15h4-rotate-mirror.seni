;; a variation of 15fe-rotate-mirror with wash added as a background

(define
  coords []
  colours []
  make-colour (col/procedural-fn a: {[0.062 0.117 0.209] (gen/scalar)}
                                 b: {[0.764 0.639 0.638] (gen/scalar)}
                                 c: {[0.613 0.181 0.155] (gen/scalar)}
                                 d: {[0.695 0.726 0.761] (gen/scalar)})

  focalpoint ({focal/point (gen/select from: ['focal/point
                                          'focal/hline
                                          'focal/vline])} 
              position: [{82 (gen/int min: -300 max: 300)} 
                         {268 (gen/int min: -300 max: 300)}]
              distance: {488 (gen/int min: 300 max: 900)}))

(loop (t from: 0 upto: 1 steps: {63 (gen/int min: 5 max: 100)})
  (define
    p1 (interp/bezier t: t
                      coords: {[[26.352 71.412] [23.830 24.871] [-133.484 -181.749] [267.624 -253.808]]
                                (gen/vector min: -300 max: 300)})
    p2 (interp/bezier t: t
                      coords: {[[-8.177 249.445] [102.280 -277.847] [-45.873 -253.028] [180.791 -209.762]]
                                (gen/vector min: -300 max: 300)})
    c1 (make-colour t: (focalpoint position: p1))
    c2 (make-colour t: (focalpoint position: p2)))
  (vector/append coords p1 p2)
  (vector/append colours c1 c2))

(fn (wash variation: 200
          line-width: 70
          line-segments: 5
          colour: (col/rgb r: 0.627 g: 0.627 b: 0.627 alpha: 0.4)
          seed: 272)

  (fn (v x: 0 y: 0 z: 0 scale: 1)
    (+ y (* scale (prng/perlin-signed x: x y: y z: z))))

  (define 
    w/3 (/ canvas/width 3)
    h/3 (/ canvas/height 3))
  (loop (h from: -20 to: 1020 increment: 20)
    (bezier tessellation: line-segments
            line-width: line-width
            coords: [[0 (v x: 0 y: h z: seed scale: variation)]
                     [w/3 (v x: w/3 y: h z: seed scale: variation)]
                     [(* w/3 2) (v x: (* w/3 2) y: h z: seed scale: variation)]
                     [canvas/width (v x: canvas/width y: h z: seed scale: variation)]]
            colour: colour)

    (bezier tessellation: line-segments
            line-width: line-width
            coords: [[(v x: 0 y: h z: seed scale: variation) 0]
                     [(v x: h/3 y: h z: seed scale: variation) h/3]
                     [(v x: (* h/3 2) y: h z: seed scale: variation) (* h/3 2)]
                     [(v x: canvas/height y: h z: seed scale: variation) canvas/height]]
            colour: colour)))

(fn (draw)
  (poly coords: coords colours: colours))

(wash colour: {(col/rgb r: 0.184 g: 0.605 b: 0.804 alpha: 0.163) (gen/col)})

(on-matrix-stack
  (translate vector: [(/ canvas/width 2) (/ canvas/height 2)])
  (scale scalar: {0.996 (gen/scalar min: 0.8 max: 2)})
  (rotate angle: {88.202 (gen/scalar min: 0 max: 360)})
  (repeat/rotate-mirrored draw: draw
                          copies: {28 (gen/int min: 1 max: 30)}))


