
(define coords (list [{  0 (int max: canvas/width)} {500 (int max: canvas/height)}]
                     [{333 (int max: canvas/width)} {100 (int max: canvas/height)}]
                     [{666 (int max: canvas/width)} {900 (int max: canvas/height)}]
                     [{999 (int max: canvas/width)} {500 (int max: canvas/height)}]))

(fn (interesting-circle position: [500 500]
                            colour: red
                            seed: "yabba dabba dooo"
                            radius: 300)
  (define
    rng (prng/range seed: seed)
    outer-exterior (prng/range seed: (take from: rng) min: 170 max: 210)
    outer-interior (prng/range seed: (take from: rng) min: 80 max: 170)
    inner-exterior (prng/range seed: (take from: rng) min: 100 max: 150)
    inner-interior (prng/range seed: (take from: rng) min: 0 max: 100)
    srng (prng/range min: -1 max: 1 seed: seed))
  (on-matrix-stack
   (translate vector: position)
   (scale scalar: (/ radius 210))
   (loop (i to: 3)
         (on-matrix-stack
          (rotate angle: (* 360 (take from: rng)))
          ;; outer ring
          (circle-slice tessellation: 20
                        position: [0 0]
                        colour: (col/lighten colour: colour
                                             delta: (* {30 (int min: 20 max: 60)} (take from: srng)))
                        angle-start: 0
                        angle-end: 320
                        width: (take from: outer-exterior)
                        inner-width: (take from: outer-interior)
                        height: (take from: outer-exterior)
                        inner-height: (take from: outer-interior))
          ;; inner ring
          (circle-slice tessellation: 10
                        position: [0 0]
                        colour: (col/lighten colour: colour
                                             delta: (* {20 (int min: 10 max: 40)} (take from: srng)))
                        angle-start: 0
                        angle-end: 320
                        width: (take from: inner-exterior)
                        inner-width: (take from: inner-interior)
                        height: (take from: inner-exterior)
                        inner-height: (take from: inner-interior))))
   ;; centre fill
   (circle-slice tessellation: 10
                 position: [0 0]
                 colour: (col/lighten colour: colour 
                                      delta: (* {10 (int min: 5 max: 20)} (take from: srng)))
                 angle-start: 0
                 angle-end: 360
                 radius: 30)))



;(bezier coords: coords)

(define half-pi (/ math/PI 2))

(fn (tentacle position: [0 0]
                  angle: 0)
  (define [x y] position
          cosa (math/cos angle: angle)
          sina (math/sin angle: angle)
          min-pos-rad 28
          max-pos-rad 300
          rem (interp/fn from: [min-pos-rad max-pos-rad]
                         to: [20 1]))

  (loop (r from: min-pos-rad to: max-pos-rad increment: 20)
        (interesting-circle position: [(+ x (* cosa r))
                                          (+ y (* sina r))]
                            radius: (rem val: r)
                            colour: red)
        (interesting-circle position: [(- x (* cosa r))
                                          (- y (* sina r))]
                            radius: (rem val: r)
                            colour: red)))

(fn (norm position: [0 0]
              t: 0)
  (define
    [tx ty] (interp/bezier-tangent t: t coords: coords)
    angle (- (math/atan2 x: tx y: ty) half-pi))
  
;  (interesting-circle position: position
;                      radius: 20
;                      colour: blue)
  (tentacle position: position
            angle: angle))

(path/bezier fn: norm
             steps: 20
             coords: coords)
