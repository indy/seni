
 (define accumulated-rect
  (fn (x: 0
       y: 0
       width: 10
       height: 10
       colour: (col/rgb r: 0.0 g: 1.0 b: 0.0 a: 0.5)
       volatility: 0
       passes: 1)
      (let ((halfWidth (/ width 2))
            (halfHeight (/ height 2))
            (alpha (col/getAlpha colour: colour))
            (passColour (col/setAlpha colour: colour alpha: (/ alpha passes)))
            (prngs (rng/signed seed: "asdf")))
        (onMatrixStack
         (translate x: x y: y)
         (loop (i to: passes)
               (let (((rr xr yr) (take num: 3 from: prngs)))
                 (onMatrixStack
                  (rotate angle: (* rr 0.02 volatility))
                  (rect x: (* xr 5 volatility)
                        y: (* yr 5 volatility)
                        width: width
                        height: height
                        colour: passColour))))))))

(define bezier-stroked-rect
  (fn (x: 0
          y: 0
          width: 10
          height: 10
          colour: (col/rgb r: 0.0 g: 1.0 b: 0.0 a: 0.5)
          colourVolatility: 0
          volatility: 0
          overlap: 3
          iterations: 10
          seed: "shabba")

      (let ((thWidth (/ width 3))
            (thHeight (/ height 3))
            (vol volatility)

            (startX (- x (/ width 2)))
            (startY (- y (/ height 2)))

            (hDelta (/ height iterations))
            (hStripWidth (/ height iterations))
            (halfHStripWidth (/ hStripWidth 2))

            (vDelta (/ width iterations))
            (vStripWidth (/ width iterations))
            (halfVStripWidth (/ vStripWidth 2))

            (prngs (rng/unsigned seed: seed))

            (halfAlpha (/ (col/getAlpha colour: colour) 2))
            (labColour (col/setAlpha colour: (col/convert format: LAB colour: colour)
                                     alpha: halfAlpha))
            )


        ; horizontal strips
        (loop (i to: iterations)
              (let (((rx1 ry1 rx2 ry2 rx3 ry3 rx4 ry4 rcol) (take num: 9 from: prngs))
                    (current-colour (col/setLightness colour: labColour
                                                      l: (+ (col/getLightness colour: labColour) (* colourVolatility rcol)))))
                (bezier tessellation: 10
                        lineWidth: (+ overlap hStripWidth)
                        coords: (pair
                                 (+ (+ (* rx1 vol) startX) (* 0 thWidth))
                                 (+ (+ (* i hDelta) (* ry1 vol) startY) halfHStripWidth)

                                 (+ (+ (* rx2 vol) startX) (* 1 thWidth))
                                 (+ (+ (* i hDelta) (* ry2 vol) startY) halfHStripWidth)

                                 (+ (+ (* rx3 vol) startX) (* 2 thWidth))
                                 (+ (+ (* i hDelta) (* ry3 vol) startY) halfHStripWidth)

                                 (+ (+ (* rx4 vol) startX) (* 3 thWidth))
                                 (+ (+ (* i hDelta) (* ry4 vol) startY) halfHStripWidth))
                        colour: current-colour)
                )
              )

                                        ; vertical strips
        (loop (i to: iterations)
              (let (((rx1 ry1 rx2 ry2 rx3 ry3 rx4 ry4 rcol) (take num: 9 from: prngs))
                    (current-colour (col/setLightness colour: labColour
                                                      l: (+ (col/getLightness colour: labColour) (* colourVolatility rcol)))))
                (bezier tessellation: 10
                        lineWidth: (+ overlap vStripWidth)
                        coords: (pair
                                 (+ (+ (* i vDelta) (* rx1 vol) startX) halfVStripWidth)
                                 (+ (+ (* ry1 vol) startY) (* 0 thHeight))

                                 (+ (+ (* i vDelta) (* rx2 vol) startX) halfVStripWidth)
                                 (+ (+ (* ry2 vol) startY) (* 1 thHeight))

                                 (+ (+ (* i vDelta) (* rx3 vol) startX) halfVStripWidth)
                                 (+ (+ (* ry3 vol) startY) (* 2 thHeight))

                                 (+ (+ (* i vDelta) (* rx4 vol) startX) halfVStripWidth)
                                 (+ (+ (* ry4 vol) startY) (* 3 thHeight)))
                        colour: current-colour))))))


(define baseColour (col/rgb r: 0.8 g: 0.0 b: 0.0 a: 0.5))
(define border 50)

(define squareSize (/ (- 1000 (* 3 border)) 2))
(define squareRadius (/ squareSize 2))
(define squarePosMin (+ border squareRadius))
(define squarePosMax (- 1000 (+ border squareRadius)))

(rect x: squarePosMin y: squarePosMax
      width: squareSize height: squareSize
  	  colour: baseColour)

(accumulated-rect x: squarePosMax y: squarePosMax
                  width: squareSize height: squareSize
                  colour: baseColour
                  volatility: 1.5
                  passes: 50)

(bezier-stroked-rect x: squarePosMin y: squarePosMin
                     width: squareSize height: squareSize
                     colour: baseColour
                     volatility: 10.0
                     overlap: 3.0)

(bezier-stroked-rect x: squarePosMax y: squarePosMin
                     width: squareSize height: squareSize
                     colour: baseColour
                     colourVolatility: 10
                     volatility: 10.0
                     overlap: 3.0
                     iterations: 79)
