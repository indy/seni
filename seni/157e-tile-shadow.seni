(rect position: (v2 (/ canvas/width 2) (/ canvas/height 2))
      width: canvas/width
      height: canvas/height
      colour: [white (col)])

(loop (y from: 1 to: (- num-squares 1))
  (loop (x from: 1 to: (- num-squares 1))
    (define-vars position (v2 (map-to-position at: x)
                              (map-to-position at: y))
                 colour (make-colour t: (focalpoint position: position)))

    (draw-tile position: (v2/+ position (v2 5 -5))
               colour: (col/set-lab-l colour: colour value: 50))
    (draw-tile position: position
               colour: colour)))

(define make-colour
  (col/procedural-fn a: [(col/rgb r: 0.80 g: 0.50 b: 0.40) (col)]
                     b: [(col/rgb r: 0.20 g: 0.40 b: 0.20) (col)]
                     c: [(col/rgb r: 2.00 g: 1.00 b: 1.00) (col)]
                     d: [(col/rgb r: 0.00 g: 0.25 b: 0.25) (col)]))

(define focalpoint ([focal/point (select from: (list 'focal/point
                                                     'focal/hline
                                                     'focal/vline))] 
                    position: (v2 [500 (int max: canvas/width)] 
                                  [500 (int max: canvas/height)])
                    distance: [800 (int min: (/ canvas/width 2) max: canvas/width)]))

(define num-squares-to-render [7 (int min: 4 max: 10)])

(define num-squares (+ 2 num-squares-to-render))

(define num-gaps (+ num-squares 1))
(define square-size (/ canvas/width num-squares))

(fn (draw-tile position: (v2 0 0)
                   colour: red)
  (on-matrix-stack
    (translate vector: position)
    (rotate angle: 45)
    (scale scalar: 1.3)
    (rect position: (v2 0 0)
          width: square-size 
          height: square-size
          colour: colour)))

(fn (map-to-position at: 0)
  (+ (* square-size at) (/ square-size 2)))
