(define centre (v2 500 500))
(define master-radius [50 (scalar min: 30 max: 80)])
(define corner-square-mult [0.5 (scalar min: 0.3 max: 1.0)])
(define master-angle [0 (scalar max: PIPI)])

;; draw-octagon renders an octagon with it's center in position
(define (draw-octagon position: (v2 100 100)
                      radius: 100
                      colour: black)
  (on-matrix-stack
    (translate vector: position)
    (rotate angle: (/ PIPI 16)) ; align 
    (poly position: (v2 0 0)
          tessellation: 8
          width: radius
          height: radius
          colour: colour)))

(define (draw-unit-square colour: black)
  (rect position: (v2 0 0)
        width: 1
        height: 1
        colour: colour))

;; draws a square to the top-right of an octagon described by position and radius
(define (draw-corner-square position: (v2 100 100)
                            radius: 100
                            colour: black)
  (on-matrix-stack
    (translate vector: (v2 (+ radius (v2/x position))
                           (+ radius (v2/y position))))
    (scale scalar: (* radius corner-square-mult))
    (rotate angle: (/ PI 4))
    (draw-unit-square colour: colour)))


(define (draw)
  (let ((main-col [yellow (col alpha: 1)])
        ((triad-b triad-c) ([col/analagous (select from: (list 'col/analagous
                                                               'col/split-complementary
                                                               'col/triad))] 
                            colour: main-col)))
    (rect position: (v2 500 500)
          width: 1000
          height: 1000
          colour: triad-b)

    (on-matrix-stack
      (translate vector: centre)
      (rotate angle: master-angle)
      (loop (y from: -700 until: 700 increment: (* 2 master-radius))
        (loop (x from: -700 until: 700 increment: (* 2 master-radius))
          (draw-octagon position: (v2 x y)
                        radius: master-radius
                        colour: main-col))))

    (on-matrix-stack
      (translate vector: centre)
      (rotate angle: master-angle)
      (loop (y from: -700 until: 700 increment: (* 2 master-radius))
        (loop (x from: -700 until: 700 increment: (* 2 master-radius))
          (draw-corner-square position: (v2 x y)
                              radius: master-radius
                              colour: triad-c))))))


(draw)
