(render)

(define 
  coords1 [[153.326 66.565]
           [-143.219 370.216]
           [-254.094 -214.417]
           [368.038 -58.687]]
  coords2 [[29.449 -88.566]
           [-181.104 317.846]
           [-457.779 46.556]
           [461.392 -414.827]]
  coords3 [[-445.078 -431.034]
           [-287.184 -394.192]
           [225.426 -71.645]
           [311.633 -352.704]]

  col-fn-1 (col/build-procedural a: {[0.224 0.120 0.710] (gen/scalar)}
                                 b: [0.589 0.819 0.879] 
                                 c: [0.622 0.476 0.884] 
                                 d: [0.822 0.732 0.425] 
                                 alpha: 0.08)
  col-fn-2 (col/build-procedural a: [0.992 0.035 0.678] 
                                 b: [0.136 0.560 0.367] 
                                 c: [0.701 0.609 0.479] 
                                 d: [0.515 0.340 0.555] 
                                 alpha: 0.08)
  col-fn-3 (col/build-procedural a: [0.212 0.128 0.661] 
                                 b: [0.714 0.956 0.850]
                                 c: [0.756 0.936 0.227] 
                                 d: [0.299 0.271 0.501] 
                                 alpha: 0.08))

(fn (draw)
    (fence (t quantity: 200)
    (poly coords: [(interp/bezier t: t coords: coords1)
                   (interp/bezier t: t coords: coords2)
                   (interp/bezier t: t coords: coords3)]
          colours: [(col/value from: col-fn-1 t: t)
                    (col/value from: col-fn-2 t: t)
                    (col/value from: col-fn-3 t: t)])))

(fn (render)
    (on-matrix-stack
    (translate vector: [(/ canvas/width 1) (/ canvas/height 2)])
    (scale scalar: 2)
    (repeat/rotate-mirrored fn: (address-of draw)
                            copies: {2 (gen/int min: 1 max: 10)})))

