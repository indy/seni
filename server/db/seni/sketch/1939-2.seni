(image contrast: 1 ~ (gen/scalar min: 0.8 max: 1.1)
       brightness: -0 ~ (gen/scalar min: -0.3 max: 0.3)
       saturation: 1 ~ (gen/scalar min: 0.7 max: 1.3))

(define texture "skull-b.png" ~ (gen/select from: '("skull-a.png" "skull-b.png" "skull-c.png")))

(define per-pixel-funcs [(address-of pass-0)])
(define rng (prng/build seed: 542 min: -1 max: 1))
(define rng2 (prng/build seed: 232 min: 0 max: 1))


(mask/set from: "mask/horizontal-phase.png")
(bitmap/each from: texture
                   shuffle-seed: 321
                   fn: (address-of pass-0))

(mask/set from: "mask/horizontal-phase.png" invert: 1)
(bitmap/each from: texture
                   shuffle-seed: 321
                   fn: (address-of pass-1))


(fn (pass-0 colour: (col/rgb r: 0 g: 0 b: 0 alpha: 0) position: [100 100])
  (define
    c (col/hsluv h: 5 ~ (gen/scalar max: 360)
                 s: (* 100 (colour.col/e0))
                 l: (* 100 (colour.col/e0))))
  (mote position: [(rng.prng/value) (rng.prng/value)]
        r: (* 2 (rng2.prng/value))
        outer-aura: (* 0.5 (rng2.prng/value))
        inner-aura: (* 0.5 (rng2.prng/value))
        ring-alpha: (colour.col/e1)
        inner-alpha: (* 0.9 (colour.col/e1))
        col: c
        tess: 3))

(fn (pass-1 colour: (col/rgb r: 0 g: 0 b: 0 alpha: 0) position: [100 100])
  (define
    c (col/hsluv h: 61 ~ (gen/scalar max: 360)
                 s: (* 100 (colour.col/e0))
                 l: (* 100 (colour.col/e0))))
  (mote position: [(rng.prng/value) (rng.prng/value)]
        r: (* 2 (rng2.prng/value))
        outer-aura: (* 0.5 (rng2.prng/value))
        inner-aura: (* 0.5 (rng2.prng/value))
        ring-alpha: (colour.col/e1)
        inner-alpha: (* 0.9 (colour.col/e1))
        col: c
        tess: 30))


(fn (mote position: [100 100]
          r: 318
          outer-aura: 128
          inner-aura: 4
          ring-alpha: 1
          inner-alpha: 1.0
          col: (col/rgb)
          tess: 5)
  ; outer aura
  (ring tessellation: tess
        position: position
        inner-radius: r
        outer-radius: (+ r outer-aura)
        inner-colour: (col.col/set-alpha value: ring-alpha)
        outer-colour: (col.col/set-alpha value: 0))

  ; inner aura
  (ring tessellation: tess
        position: position
        inner-radius: (- r inner-aura)
        outer-radius: r
        inner-colour: (col.col/set-alpha value: inner-alpha)
        outer-colour: (col.col/set-alpha value: ring-alpha))

  ; inner fill
  (ring tessellation: tess
        position: position
        inner-radius: 0
        outer-radius: (- r inner-aura)
        inner-colour: (col.col/set-alpha value: 0)
        outer-colour: (col.col/set-alpha value: inner-alpha)))
