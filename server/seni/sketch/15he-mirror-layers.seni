(meta linear-colour-space: 1)


(render)

(define
  coords1 [[-73.702 -369.905]
           [-46.721 251.241]
           [482.683 486.754]
           [249.841 -61.198]] ~
  (gen/2d min: -500 max: 500)
  coords2 [[67.201 -29.005]
           [-83.504 -56.009]
           [-313.355 -455.848]
           [-102.060 -190.176]] ~
  (gen/2d min: -500 max: 500)
  coords3 [[-362.115 400.584]
           [35.240 -408.070]
           [255.548 86.787]
           [285.243 -175.679]] ~
  (gen/2d min: -500 max: 500)

  col-fn-1 (col/build-procedural a: [0.373 0.364 0.799] ~ (gen/scalar)
                                 b: [0.253 0.495 0.006] ~ (gen/scalar)
                                 c: [0.104 0.601 0.934] ~ (gen/scalar)
                                 d: [0.164 0.403 0.759] ~ (gen/scalar)
                                 alpha: 0.08)
  col-fn-2 (col/build-procedural a: [0.642 0.748 0.334] ~ (gen/scalar)
                                 b: [0.928 0.543 0.441] ~ (gen/scalar)
                                 c: [0.237 0.239 0.426] ~ (gen/scalar)
                                 d: [0.739 0.418 0.843] ~ (gen/scalar)
                                 alpha: 0.08)
  col-fn-3 (col/build-procedural a: [0.174 0.541 0.742] ~ (gen/scalar)
                                 b: [0.014 0.900 0.972] ~ (gen/scalar)
                                 c: [0.650 0.115 0.842] ~ (gen/scalar)
                                 d: [0.571 0.494 0.150] ~ (gen/scalar)
                                 alpha: 0.08))

(fn (draw)
    (fence (t num: 200)
    (poly coords: [(interp/bezier t: t coords: coords1)
                   (interp/bezier t: t coords: coords2)
                   (interp/bezier t: t coords: coords3)]
          colours: [(col/value from: col-fn-1 t: t)
                    (col/value from: col-fn-2 t: t)
                    (col/value from: col-fn-3 t: t)])))

(fn (render)
    (wash colour: (col/rgb r: 0.017 g: 0.373 b: 0.853 alpha: 0.719) ~ (gen/col))
  (on-matrix-stack
    (translate vector: [(/ canvas/width 2) (/ canvas/height 2)])
    (repeat/rotate-mirrored fn: (address-of draw)
                            copies: 2 ~ (gen/int min: 1 max: 30))))

(fn (wash vol: 200
          line-width: 70
          line-segments: 5
          colour: (col/rgb r: 0.627 g: 0.627 b: 0.627 alpha: 0.4)
          seed: 272)
  (define
    w/3 (/ canvas/width 3)
    h/3 (/ canvas/height 3))
  (loop (d from: -20 to: 1020 inc: 20)
    (bezier tessellation: line-segments
            line-width: line-width
            coords: [[0            (wash-n x: 0            d: d seed: seed vol: vol)]
                     [w/3          (wash-n x: w/3          d: d seed: seed vol: vol)]
                     [(* w/3 2)    (wash-n x: (* w/3 2)    d: d seed: seed vol: vol)]
                     [canvas/width (wash-n x: canvas/width d: d seed: seed vol: vol)]]
            colour: colour)

    (bezier tessellation: line-segments
            line-width: line-width
            coords: [[(wash-n x: 0             d: d seed: seed vol: vol) 0]
                     [(wash-n x: h/3           d: d seed: seed vol: vol) h/3]
                     [(wash-n x: (* h/3 2)     d: d seed: seed vol: vol) (* h/3 2)]
                     [(wash-n x: canvas/height d: d seed: seed vol: vol) canvas/height]]
            colour: colour)))

(fn (wash-n x: 0 d: 0 seed: 0 vol: 1)
  (+ d (* vol (prng/perlin x: x y: d z: seed))))
