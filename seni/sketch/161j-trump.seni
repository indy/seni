(define
  ;; fade out any lines which are far away from the focal points
  interest (interp/fn from: [0.2 1.5] to: [0 1] clamping: true))

;; call 'fun' for every point on a nXn grid on the canvas
(fn (grid n: 10 fun: (fn (a) 1))
  (define
    remap-x (interp/fn from: [0 (- n 1)] to: [0 canvas/width])
    remap-y (interp/fn from: [0 (- n 1)] to: [0 canvas/height]))
  (loop (y from: 0 to: n)
    (loop (x from: 0 to: n)
      (fun position: [(remap-x val: x) (remap-y val: y)]))))

(fn (make-draw-element focal-fn-a: 1
                       focal-fn-b: 1
                       rotate-factor: 1
                       width: 21
                       height: 239
                       col-fn: 1)
  (fn (draw-element position: [0 0])
    (define
      interest-a (focal-fn-a position: position)
      interest-b (focal-fn-b position: position)
      combined-interest (+ interest-a interest-b)
      alpha (interest val: combined-interest))
    (on-matrix-stack
      (translate vector: position)
      (rotate angle: (* combined-interest rotate-factor))
      (circle position: [0 0]
              colour: (col/set-alpha colour: (col-fn t: interest-a) value: alpha)
              width: width
              height: height
              tessellation: 20))))

;; render the background grid
(define
  focal-bg-a (focal/point position: [{411 (int min: 400 max: 600)} 
                                     {284 (int min: 100 max: 400)}]
                          distance: {727 (int min: 700 max: 1000)}
                          falloff: "linear")
  focal-bg-b (focal/point position: [{448 (int min: 400 max: 600)} 
                                     {690 (int min: 600 max: 900)}]
                          distance: {993 (int min: 700 max: 1000)}
                          falloff: "linear")
  col-fn-bg (col/bezier-fn a: {(col/rgb r: 0.610 g: 0.968 b: 0.362 alpha: 0.439) (col)}
                           b: {(col/rgb r: 0.516 g: 0.842 b: 0.214 alpha: 0.372) (col)}
                           c: {(col/rgb r: 0.106 g: 0.947 b: 0.362 alpha: 0.833) (col)}
                           d: {(col/rgb r: 0.326 g: 0.012 b: 0.656 alpha: 0.147) (col)}))

(grid n: {38 (int min: 30 max: 40)}
      fun: (make-draw-element focal-fn-a: focal-bg-a
                              focal-fn-b: focal-bg-b
                              rotate-factor: {370 (int min: 300 max: 400)}
                              width: {45 (int min: 30 max: 60)}
                              height: {414 (int min: 400 max: 500)}
                              col-fn: col-fn-bg))

;; render the foreground
(define
  focal-fg-a (focal/point position: {[631 384] (int min: 0 max: 1000)}
                          distance: {393 (int min: 0 max: 500)}
                          falloff: "linear")
  focal-fg-b (focal/point position: {[709 98] (int min: 0 max: 1000)}
                          distance: {588 (int min: 0 max: 600)}
                          falloff: "linear")
  col-fn-fg (col/bezier-fn a: {(col/rgb r: 0.622 g: 0.496 b: 0.132 alpha: 0.131) (col)}
                           b: {(col/rgb r: 0.746 g: 0.828 b: 0.127 alpha: 0.863) (col)}
                           c: {(col/rgb r: 0.841 g: 0.529 b: 0.047 alpha: 0.402) (col)}
                           d: {(col/rgb r: 0.783 g: 0.860 b: 0.825 alpha: 0.429) (col)}))

(grid n: {35 (int min: 30 max: 40)}
      fun: (make-draw-element focal-fn-a: focal-fg-a
                              focal-fn-b: focal-fg-b
                              rotate-factor: {125 (int min: 1 max: 200)}
                              width: {12 (int min: 10 max: 30)}
                              height: {164 (int min: 100 max: 300)}
                              col-fn: col-fn-fg))
