(meta linear-colour-space: 1)

(fn (drawer a: 0 b: 0 c: 0 d: 0 position: [100 100])
    (circle position: [0 0]
            radius: 1
            colour: red)
    )

(bitmap/each from: 1
             position: [0 0]
             width: 0
             height: 0
             fn: (address-of drawer))

(bezier tessellation: 30
        line-width-start: {50 (gen/scalar min: 30 max: 60)}
        line-width-end: {10 (gen/scalar min: 5 max: 20)}
        brush: brush/c
        coords: [[0 500] [200 900] [400 100] [600 500]]
        colour: (col/rgb r: 1 g: 0.3 b: 0 alpha: 1))



;; (bezier-bulging tessellation: 30
;;         line-width: 50
;;         brush: brush/c
;;         coords: [[200 800] [400 1200] [600 400] [800 800]]
;;         colour: (col/rgb r: 1 g: 0.3 b: 0 alpha: 1))

;; (rect width: 100
;;       height: 100
;;       position: [500 500]
;;       colour: (col/hsluv h: 20 s: 90 l: 50))

;; (line from: [20 500]
;;       to: [800 200]
;;       width: 50
;;       from-colour: (col/rgb r: 1 g: 0 b: 0 alpha: 1)
;;       to-colour: (col/rgb r: 1 g: 1 b: 0 alpha: 1))





;; (define
;;   data [])

;; ;; create a bunch of positions around the origin
;; (define
;;   random-axis-position (prng/build seed: 42 min: -500 max: 500)
;;   col-fn (col/build-procedural preset: {mars
;;                                      (gen/select from: col/procedural-fn-presets)})
;;   random-radius (prng/build seed: 42 min: 2 max: 30))

;; (loop (x to: 180)
;;   (define
;;     x-pos (prng/value from: random-axis-position)
;;     y-pos (prng/value from: random-axis-position)
;;     dist (math/distance vec1: [x-pos y-pos] vec2: [0 0])
;;     colour (col/value from: col-fn t: (/ dist 500))
;;     radius (prng/value from: random-radius))
;;   (++ data [x-pos y-pos colour radius]))

;; (fn (draw-bg obj: [])
;;   (define
;;     [x y colour radius] obj)
;;   (circle position: [x y]
;;           colour: (col/set-alpha from: colour
;;                                  value: {0.0167 (gen/scalar min: 0 max: 0.4)})
;;           radius: (* radius {6 (gen/int min: 1 max: 8)})
;;           tessellation: 20))

;; (fn (draw-body obj: [])
;;   (define
;;     [x y colour radius] obj)
;;   (circle position: [x y]
;;           colour: colour
;;           radius: radius
;;           tessellation: 20))

;; (fn (draw-shadow obj: [])
;;   (define
;;     [x y colour radius] obj
;;     offset {1.03 (gen/scalar min: 1 max: 2)})
;;   (circle position: [(* x offset) (* y offset)]
;;           colour: (col/set-alpha from: (col/darken from: colour
;;                                                      value: {27 (gen/int min: 0 max: 100)})
;;                                  value: {0.236 (gen/scalar max: 0.5)})
;;           radius: radius
;;           tessellation: 20))

;; (on-matrix-stack
;;  (translate vector: [500 500])
;;  (each (x from: data) (draw-bg obj: x))
;;  (each (x from: data) (draw-shadow obj: x))
;;  (each (x from: data) (draw-body obj: x)))
