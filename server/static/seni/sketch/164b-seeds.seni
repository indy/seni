(meta linear-colour-space: 1)


(define
  seed-radius {3.200 (gen/scalar min: 3 max: 5)}
  scale-factor 4
  phi (/ (sqrt {5 (gen/scalar min: 4 max: 6)}) {8 (gen/scalar min: 1 max: 10)})
  seeds 200
  make-colour (col/procedural-fn a: {[0.800 0.500 0.400] (gen/scalar)}
                                 b: {[0.200 0.400 0.200] (gen/scalar)}
                                 c: {[2 1 1] (gen/scalar)}
                                 d: {[0 0.250 0.250] (gen/scalar)})

  focalpoint ({focal/build-point (gen/select from: ['focal/build-point 'focal/build-hline 'focal/build-vline])}
              position: [{500 (gen/int max: canvas/width)}
                         {500 (gen/int max: canvas/height)}]
              distance: {800 (gen/int min: (/ canvas/width 2) max: canvas/width)}))

(fn (shadow-circle position: [500 500]
                   colour: red
                   seed: "yabba dabba dooo"
                   radius: 300)
  (circle tessellation: 30
          position: (vector/multiply vector: position
                                     scalar: {1.010 (gen/scalar min: 1 max: 1.05)})
          colour: (col/darken from: colour value: {20 (gen/int min: 0 max: 40)})
          radius: (* {1 (gen/scalar min: 1 max: 1.1)} radius)))


(fn (background-circle position: [500 500]
                       colour: red
                       seed: "yabba dabba dooo"
                       radius: 300)
  (circle tessellation: 10
          position: position
          colour: (col/set-alpha from: colour value: 0.01)
          radius: (* 10.1 radius))
  (circle tessellation: 10
          position: position
          colour: (col/set-alpha from: colour value: 0.05)
          radius: (* 1.8 radius))
  (circle tessellation: 10
          position: position
          colour: (col/set-alpha from: colour value: 0.05)
          radius: (* 1.5 radius))
  (circle tessellation: 10
          position: position
          colour: (col/set-alpha from: colour value: 0.05)
          radius: (* 1.2 radius)))

(fn (interesting-circle position: [500 500]
                        colour: red
                        seed: "yabba dabba dooo"
                        radius: 300)
  (define
    rng (prng/range seed: seed)
    outer-exterior (prng/range seed: (rng) min: 170 max: 210)
    outer-interior (prng/range seed: (rng) min: 80 max: 170)
    inner-exterior (prng/range seed: (rng) min: 100 max: 150)
    inner-interior (prng/range seed: (rng) min: 0 max: 100)
    srng (prng/range min: -1 max: 1 seed: seed))
  (on-matrix-stack
    (translate vector: position)
    (scale scalar: (/ radius 210))
    (loop (i to: 3)
      (on-matrix-stack
        (rotate angle: (* 360 (rng)))
        ;; outer ring
        (circle-slice tessellation: 20
                      position: [0 0]
                      colour: (col/lighten from: colour
                                           value: (* {30 (gen/int min: 20 max: 60)} (srng)))
                      angle-start: 0
                      angle-end: 320
                      width: (outer-exterior)
                      inner-width: (outer-interior)
                      height: (outer-exterior)
                      inner-height: (outer-interior))
        ;; inner ring
        (circle-slice tessellation: 10
                      position: [0 0]
                      colour: (col/lighten from: colour
                                           value: (* {20 (gen/int min: 10 max: 40)} (srng)))
                      angle-start: 0
                      angle-end: 320
                      width: (inner-exterior)
                      inner-width: (inner-interior)
                      height: (inner-exterior)
                      inner-height: (inner-interior))))
    ;; centre fill
    (circle-slice tessellation: 10
                  position: [0 0]
                  colour: (col/lighten from: colour
                                       value: (* {10 (gen/int min: 5 max: 20)} (srng)))
                  angle-start: 0
                  angle-end: 360
                  radius: 30)))

;(rect position: canvas/centre
;      width: canvas/width
;      height: canvas/height
;      colour: {white (gen/col)})

(on-matrix-stack
  (translate vector: canvas/centre)
  (scale scalar: 8)
  (loop (i to: seeds)
    (define
      theta (/ (* i math/TAU) phi)
      r (* scale-factor (sqrt i))
      position [(* r (math/cos from: theta))
                (* r (math/sin from: theta))]
      colour (make-colour t: (focalpoint position: position)))
    (background-circle position: position
                       radius: seed-radius
                       colour: colour
                       seed: i)))

(on-matrix-stack
  (translate vector: canvas/centre)
  (scale scalar: 8)
  (loop (i to: seeds)
    (define
      theta (/ (* i math/TAU) phi)
      r (* scale-factor (sqrt i))
      position [(* r (math/cos from: theta))
                (* r (math/sin from: theta))]
      colour (make-colour t: (focalpoint position: position)))
    (shadow-circle position: position
                       radius: seed-radius
                       colour: colour
                       seed: i)))

(on-matrix-stack
  (translate vector: canvas/centre)
  (scale scalar: 8)
  (loop (i to: seeds)
    (define
      theta (/ (* i math/TAU) phi)
      r (* scale-factor (sqrt i))
      position [(* r (math/cos from: theta))
                (* r (math/sin from: theta))]
      colour (make-colour t: (focalpoint position: position)))
    (interesting-circle position: position
                        radius: seed-radius
                        colour: colour
                        seed: i)))
