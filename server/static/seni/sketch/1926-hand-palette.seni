(define

  [col1 col2 col3 col4 col5] (col/palette index: {0 (gen/scalar min: 0 max: 200)})

  hslcol1 (col/convert colour: col1 format: HSLuv)
  hslcol2 (col/convert colour: col2 format: HSLuv)
  hslcol3 (col/convert colour: col3 format: HSLuv)
  hslcol4 (col/convert colour: col4 format: HSLuv)
  hslcol5 (col/convert colour: col5 format: HSLuv)
  hslrng (prng/build seed: 42
                     min: -10
                     max: 10)

  texture "hand.png"
  bmx (interp/build from: [0 canvas/width] to: [0 (bitmap/width from: texture)])
  bmy (interp/build from: [0 canvas/height] to: [0 (bitmap/height from: texture)]))

(on-matrix-stack
  (scale scalar: 1.1)
  (rotate angle: 3)
  (wash colour: col1))

(on-matrix-stack
  (scale scalar: 1.05)
  (tri-hsl alpha: {0.118 (gen/scalar)})
  (tri-lab alpha: {0.062 (gen/scalar)}))

(define
  ra (prng/build seed: 42
                 min: {-5.472 (gen/stray from: -4 by: 4)}
                 max: {3.869 (gen/stray from: 4 by: 4)})
  sc {0.801 (gen/scalar min: 0.8 max: 1.1)}
  wh {5 (gen/int min: 5 max: 20)}
  w wh
  h wh)

(fn (left x: 0 y: 0 w: 0 h: 0 colour: red)
  (poly coords: [[(- x w) (+ y h h)]
                 [(+ x w) (+ y h)]
                 [(- x w) (+ y 0)]
                 [(+ x w) (- y h)]]
        colours: [colour colour colour colour]))

(fn (right x: 0 y: 0 w: 0 h: 0 colour: red)
  (poly coords: [[(+ x w) (+ y h h)]
                 [(- x w) (+ y h)]
                 [(+ x w) (+ y 0)]
                 [(- x w) (- y h)]]
        colours: [colour colour colour colour]))

(fn (left-side x: 0 y: 0 w: 0 h: 0 colour: red strength: 1)
  (define col (col/set-alpha value: strength
                             colour: (col/set-s value: (* 100 strength)
                                                colour: (col/convert format: HSLuv colour: colour))))
  (on-matrix-stack
    (translate vector: [x y])
    (rotate angle: (prng/value from: ra))
    (left x: 0 y: 0 w: w h: h colour: col)
    (loop (i to: 3)
      (scale scalar: sc)
      (rotate angle: (prng/value from: ra))
      (left x: 0 y: 0 w: w h: h colour: col))))

(fn (right-side x: 0 y: 0 w: 0 h: 0 colour: red strength: 1)
  (define col (col/set-alpha value: strength
                             colour: (col/set-s value: (* 100 strength)
                                                colour: (col/convert format: HSLuv colour: colour))))
  (on-matrix-stack
    (translate vector: [x y])
    (rotate angle: (prng/value from: ra))
    (right x: 0 y: 0 w: w h: h colour: col)
    (loop (i to: 3)
      (scale scalar: sc)
      (rotate angle: (prng/value from: ra))
      (right x: 0 y: 0 w: w h: h colour: col))))

(fn (tri-lab alpha: 1)
  (loop (y from: 0 to: canvas/height inc: (* 2 h))
    (loop (x from: 0 to: canvas/width inc: (* 4 w))
      (define
        c2 (col/set-l colour: hslcol2 value: (+ (col/get-l colour: hslcol2) (prng/value from: hslrng)))
        c3 (col/set-l colour: hslcol3 value: (+ (col/get-l colour: hslcol3) (prng/value from: hslrng)))
        col-bm (bitmap/value from: texture position: [(interp/value from: bmx t: x)
                                                      (interp/value from: bmy t: y)]))
      (left-side  x: x         y: y w: w h: h colour: c2 strength: (col/get-r colour: col-bm))
      (right-side x: (+ x w w) y: y w: w h: h colour: c3 strength: (col/get-r colour: col-bm)))))

(fn (tri-hsl alpha: 1)
  (loop (y from: 0 to: canvas/height inc: (* 2 h))
    (loop (x from: 0 to: canvas/width inc: (* 4 w))
      (define
        c4 (col/set-l colour: hslcol4 value: (+ (col/get-l colour: hslcol4) (prng/value from: hslrng)))
        c5 (col/set-l colour: hslcol5 value: (+ (col/get-l colour: hslcol5) (prng/value from: hslrng)))

        col-bm (bitmap/value from: texture position: [(interp/value from: bmx t: x)
                                                      (interp/value from: bmy t: y)]))
      (left-side  x: x         y: y w: w h: h colour: c4 strength: (col/get-r colour: col-bm))
      (right-side x: (+ x w w) y: y w: w h: h colour: c5 strength: (col/get-r colour: col-bm)))))


(fn (wash vol: 200
          line-width: 70
          line-segments: 5
          colour: (col/rgb r: 0.627 g: 0.627 b: 0.627 alpha: 0.4)
          seed: 272)
  (define
    w/3 (/ canvas/width 3)
    h/3 (/ canvas/height 3))
  (loop (d from: -20 to: 1020 inc: 20)
    (bezier tessellation: line-segments
            line-width: line-width
            coords: [[0            (wash-n x: 0            d: d seed: seed vol: vol)]
                     [w/3          (wash-n x: w/3          d: d seed: seed vol: vol)]
                     [(* w/3 2)    (wash-n x: (* w/3 2)    d: d seed: seed vol: vol)]
                     [canvas/width (wash-n x: canvas/width d: d seed: seed vol: vol)]]
            colour: colour)

    (bezier tessellation: line-segments
            line-width: line-width
            coords: [[(wash-n x: 0             d: d seed: seed vol: vol) 0]
                     [(wash-n x: h/3           d: d seed: seed vol: vol) h/3]
                     [(wash-n x: (* h/3 2)     d: d seed: seed vol: vol) (* h/3 2)]
                     [(wash-n x: canvas/height d: d seed: seed vol: vol) canvas/height]]
            colour: colour)))

(fn (wash-n x: 0 d: 0 seed: 0 vol: 1)
  (+ d (* vol (prng/perlin x: x y: d z: seed))))
