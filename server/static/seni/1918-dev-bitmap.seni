(meta linear-colour-space: 1)

(define
  texture "skull-b.png"
  rng (prng/build seed: {3208 (gen/scalar min: 1 max: 5000)} min: 0 max: 10)
  per-pixel-funcs [(address-of pass-1)
                   (address-of pass-2)])

(each (per-pixel-func from: per-pixel-funcs)
      (bitmap/each from: texture
                   position: [500 500]
                   width: 1000
                   height: 1000
                   fn: per-pixel-func))

(fn (pass-1 colour: (col/rgb r: 0 g: 0 b: 0 alpha: 0) position: [100 100])
  (per-pixel-1 a: (col/e0 from: colour)
               width: 11.8
               from: [13 -6]
               to: [5 6]))

(fn (pass-2 colour: (col/rgb r: 0 g: 0 b: 0 alpha: 0) position: [100 100])
  (per-pixel-2 a: (col/e0 from: colour)
               width: {1.3 (gen/scalar min: 1 max: 2)}
               from: [{5 (gen/scalar min: 4 max: 6)}
                      {8 (gen/scalar min: 7 max: 9)}]
               to: [{-6 (gen/scalar min: -7 max: -5)}
                    {-11 (gen/scalar min: -12 max: -10)}]))

(fn (per-pixel-1 a: 0 width: 0 from: [0 0] to: [0 0])
  (line from: [(* (get-x from: from) (math/cos from: (* a math/PI)))
               (* (get-y from: from) (math/sin from: (* a math/PI)))]
        to: [(* (get-x from: to) (math/cos from: (* a math/PI)))
             (* (get-y from: to) (math/sin from: (* a math/PI)))]
        width: (- width a)
        brush: {brush/c (gen/select from: brush/*)}
        brush-subtype: (prng/value from: rng)
        colour: (col/rgb r: a g: a b: a alpha: 0.2)))

(fn (per-pixel-2 a: 0 width: 0 from: [0 0] to: [0 0])
  (define th {2.3 (gen/scalar min: 0 max: 6)})
  (line from: [(* (get-x from: from) (math/cos from: (+ th (* a math/PI))))
               (* (get-y from: from) (math/sin from: (+ th (* a math/PI))))]
        to: [(* (get-x from: to) (math/cos from: (+ th (* a math/PI))))
             (* (get-y from: to) (math/sin from: (+ th (* a math/PI))))]
        width: (- width a)
        brush: {brush/c (gen/select from: brush/*)}
        brush-subtype: (prng/value from: rng)
        colour: (col/rgb r: a g: a b: a alpha: 0.2)))
