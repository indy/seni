(meta linear-colour-space: 1)

(render-background)
(render-main)

(define
  num-squares-to-render 38 ~ (gen/int min: 14 max: 40)
  gap-size 5 ~ (gen/int min: 0 max: 10)
  num-squares (+ 2 num-squares-to-render)
  num-gaps (+ num-squares 1)
  square-size (/ (- canvas/width (* gap-size num-gaps)) num-squares)
  focal-point (focal/build-point ~ (gen/select from: '(focal/build-point
                                                     focal/build-hline
                                                     focal/build-vline))
                                 position: [1000 ~ (gen/select from: '(0 500 1000))
                                                 1000 ~ (gen/select from: '(0 500 1000))]
                                 distance: 755 ~ (gen/scalar min: 300 max: 1300))
  focal-sat (focal/build-vline ~ (gen/select from: '(focal/build-point
                                                   focal/build-hline
                                                   focal/build-vline))
                               position: [779 505] ~ (gen/scalar min: 0 max: 1000)
                               distance: 645 ~ (gen/scalar min: 300 max: 1300))
  focal-hue (focal/build-vline ~ (gen/select from: '(focal/build-point
                                                   focal/build-hline
                                                   focal/build-vline))
                               position: [702 745] ~ (gen/scalar min: 0 max: 1000)
                               distance: 1148 ~ (gen/scalar min: 300 max: 1300))
  rng-fn (prng/build min: -1 max: 1 seed: 454)
  interp-h (interp/build to: [0 360])
  interp-s (interp/build to: [0 100])
  interp-l (interp/build to: [0 90])
  box-colour (col/rgb r: 0.2 g: 0.2 b: 0.2 alpha: 0.7))

(fn (stroked-box position: [500 500]
                 seed: 0)

  (translate vector: position)

  (define
    volatility (focal/value from: focal-point position: position)
    line-colour (col/hsluv h: (interp/value from: interp-h t: (focal/value from: focal-hue position: position))
                           s: (interp/value from: interp-s t: (focal/value from: focal-sat position: position))
                           l: (interp/value from: interp-l t: volatility))
    half-size+ (/ square-size 2)
    half-size- (* half-size+ -1)
    thickness 3.0 ~ (gen/scalar min: 0.9 max: 3.0)
    half-thickness (/ thickness 2))

  (on-matrix-stack
    ;; displace the box according to volatility
   (rotate angle: (* (prng/value from: rng-fn) volatility 22.575 ~ (gen/scalar min: 0 max: 200)))
   (translate vector: [(* (prng/value from: rng-fn) volatility 36.817 ~ (gen/scalar min: 0 max: 100))
                       (* (prng/value from: rng-fn) volatility 61.290 ~ (gen/scalar min: 0 max: 100))])
    ;; draw a box around the origin
    (line from: [(+ half-size- half-thickness) half-size-]
          to: [(- half-size+ half-thickness) half-size-]
          width: thickness
          colour: line-colour)
    (line from: [half-size+ (- half-size- half-thickness)]
          to: [half-size+ (+ half-size+ half-thickness)]
          width: thickness
          colour: line-colour)
    (line from: [(- half-size+ half-thickness) half-size+]
          to: [(+ half-size- half-thickness) half-size+]
          width: thickness
          colour: line-colour)
    (line from: [half-size- (+ half-size+ half-thickness)]
          to: [half-size- (- half-size- half-thickness)]
          width: thickness
          colour: line-colour)))

(fn (map-to-position at: 0)
  (- (+ (* (+ gap-size square-size) at) (/ square-size 2) gap-size)
     (/ canvas/height 2)))

(fn (render-main)
  (define
    x-sub 5 ~ (gen/int min: 1 max: 8)
    y-sub 7 ~ (gen/int min: 1 max: 8))
  (on-matrix-stack
    (translate vector: canvas/centre)
    (loop (y from: y-sub to: (- num-squares y-sub))
      (loop (x from: x-sub to: (- num-squares x-sub))
        (define
          position [(map-to-position at: x) (map-to-position at: y)])
        (on-matrix-stack
          (stroked-box position: position
                       seed: (+ x (* y num-squares))))))))

(fn (render-background colour: (col/rgb r: 1 g: 1 b: 0.9))
  (rect position: canvas/centre
        width: canvas/width
        height: canvas/height
        colour: colour))
