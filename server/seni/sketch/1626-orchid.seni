;; some of the interp functions accept defining parameters as well as a 't' value
;; but interp/build returns a structure that's used by interp/values and interp/value

;; generally any function that returns a structure will be called build and  have a complimentary function called 'value' to return a value

;; some other functions like path/* take functions

(curves-to-curve seed: 123
                 source-pos: [{273 (gen/scalar min: 0 max: 1000)}
                              {183 (gen/scalar min: 0 max: 1000)}]
                 source-size: {9 (gen/scalar min: 5 max: 50)}
                 dest-curve: {[[896 166]
                               [82 15]
                               [21 481]
                               [861 931]]
                              (gen/2d min: 0 max: 1000)}
                 num-curves: {40 (gen/scalar min: 3 max: 50)})
                                        ;(curves-to-area)

;; pass in a function to curves-to-curve that accepts:
;; bezier to draw, ith, t, rng

;; also call a function with the dest-curve only

;; bezier curves that all end on a pre-defined curve
(fn (curves-to-curve seed: 123
                     source-pos: [200 500]
                     source-size: 18
                     dest-curve: [[800 100] [600 200] [700 300] [800 500]]
                     num-curves: 11)
  (define
    half-source-size (/ source-size 2)
    source-rng (prng/build min: (* half-source-size -1) max: half-source-size seed: seed)
    remap (interp/build from: [0 (- num-curves 1)] to: [0 1]))
  (loop (i to: num-curves)
    (define
      t (interp/value from: remap t: i)
      pa [(+ (nth from: source-pos n: 0) (prng/value from: source-rng))
          (+ (nth from: source-pos n: 1) (prng/value from: source-rng))]

      pd (interp/bezier coords: dest-curve t: t)

      norm (math/normal vec1: pa vec2: pd)
      pb (interp/ray point: (interp/line from: pa to: pd t: 0.333)
                     direction: norm t: 150)
      pc (interp/ray point: (interp/line from: pa to: pd t: 0.666)
                     direction: norm t: -150)


      )

    (bezier coords: [pa pb pc pd]
            line-width: 5
            colour: blue
            tessellation: 50)

    ;; debug
    (rect position: source-pos
          width: source-size
          height: source-size
          colour: (col/rgb g: 1.0 alpha: 0.2))

    (circle position: pb
            radius: 30
            colour: (col/rgb r: 1.0 b: 1.0 alpha: 0.2))
    (circle position: pc
            radius: 30
            colour: (col/rgb r: 1.0 g: 1.0 alpha: 0.2))
    (line from: pa
          to: pd
          colour: (col/rgb r: 0.4 alpha: 0.1)
          width: 10)


    ))


;; bezier curves that all end within a set area
(fn (curves-to-area seed: 123
                    source-pos: [200 500]
                    source-size: 18
                    dest-pos: [800 500]
                    dest-size: 500
                    num-curves: 11)
  (define

    half-source-size (/ source-size 2)
    half-dest-size (/ dest-size 2)
    source-rng (prng/build min: (* half-source-size -1) max: half-source-size seed: seed)
    dest-rng (prng/build min: (* half-dest-size -1) max: half-dest-size seed: (+ 1 seed))

    )
  (loop (i to: num-curves)
    (define
      pa [(+ (nth from: source-pos n: 0) (prng/value from: source-rng))
          (+ (nth from: source-pos n: 1) (prng/value from: source-rng))]
      pd [(+ (nth from: dest-pos n: 0) (prng/value from: dest-rng))
          (+ (nth from: dest-pos n: 1) (prng/value from: dest-rng))]
      norm (math/normal vec1: pa vec2: pd)
      pb (interp/ray point: (interp/line from: pa to: pd t: 0.333)
                     direction: norm t: 150)
      pc (interp/ray point: (interp/line from: pa to: pd t: 0.666)
                     direction: norm t: -150)
      )

    (bezier coords: [pa pb pc pd]
            line-width: 5
            colour: blue
            tessellation: 50)

    ;; debug
    (rect position: source-pos
          width: source-size
          height: source-size
          colour: (col/rgb g: 1.0 alpha: 0.2))
    (rect position: dest-pos
          width: dest-size
          height: dest-size
          colour: (col/rgb g: 1.0 alpha: 0.2))
    (circle position: pb
            radius: 30
            colour: (col/rgb r: 1.0 b: 1.0 alpha: 0.2))
    (circle position: pc
            radius: 30
            colour: (col/rgb r: 1.0 g: 1.0 alpha: 0.2))
    (line from: pa
          to: pd
          colour: (col/rgb r: 0.4 alpha: 0.1)
          width: 10)


    ))
