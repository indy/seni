* TODO [1/7]
  1. [ ] interp/bezier
  2. [ ] cleanup memory of parser
  3. [ ] structs for compile info and runtime info
  4. [ ] seni_env
  5. [ ] 'in' paramaeter for loop ?
  6. [ ] remove hsv colour space? - would this get rid of the illegal state?
  7. [X] remove id, debug_id and debug_allocatable from seni_var


* wasm - opengl

  main issue is that the c-side should be allocating memory for the rendering. this will enable the renderpacket method 

  options are:
  a. call js from c, passing in the pointers to the vertex data. js side renders with OpenGL
  b. call OpenGL from c

  with a:
  render the vertices (compile+run code)
  then later on the js-side will call a 'render-to-opengl' method on the c-side
  the c-side will call a 'render-render-packets' function on the js-side multiple times
  
  with b:
  pass in a canvas to c-side, let something initialise an opengGL context
  render the vertices (compile+run code)
  js-side will call a 'render-to-opengl' method and we're done

  how will b work in a web-worker situation? - can the gl context be shared? could the vertex data from one c-side web-worker be transferred for use in the c-side of a worker that has the gl context?
  

* first class functions / ghetto-equivalents
  don't know how to implement closures in a stack vm
  SECD machines? lua implementation?

  could hack in a prng/range equivalent:
  store a vector containing seed+inc+min+max

  replacing old (prng/range seed: 1 min: 0 max: 100) with (prng/build seed: 1 min: 0 max: 100)
  replace code like (take num: 3 from: rng) with (prng/take num: 3 from: rng)
  replace code like (rng) with (prng/take-1 from: rng)

  without first class functions how will code like take work?

  'map' could work if it's limited to functions that are defined at the top-level of the script

  'interp/fn' could return a structure similar to the prng/range workaround
  so rather than (define foo (interp/fn from: [0 1] to: [123 345])) (foo val: 42)
  we'd have      (define foo (interp/build from: [0 1] to: [123 345])) (interp use: foo val: 42)

  have some sort of 'invoke' function/special form
  e.g. (invoke (address-of draw-fn) a: 4 b: 5)
  with the restriction that it can only invoke top-level functions
  and address-of returns the value.i of the given name

  'path/bezier' : ??? (e.g. 1560-path.seni)
  1638-night.seni : impossible?


* seni_env

  standard universal bindings (done once, immutable, applied to all compiled/executed programs)
  e.g. the standard api functions in seni_env

  standard per-program bindings (done at program start, equivalent to a set of known global variables)
  e.g. global bindings like canvas/width which require a call to add_global_mapping.

  per-program bindings (parse through the program)



* seni_vm
  four types of command in the VM:
  1. Arithmetic: perform arithmetic and logical operations on the stack
  2. Memory access: transfer data between the stack and virtual memory
  3. Program flow: conditional and unconditional branching operations
  4. Function calling: call functions and return from them

(+ 7 8)

push constant 7
push constant 8
add


(- 10 2)

push constant 10
push constant 2
sub

B + C - D  ==> 

B C + D -  (post fix)
(- (+ B C) D) (pre fix)
traverse ast: lhs, rhs, op


push val B,
push val C, 
add,
push val D,
sub. 


* loop usage
from to
to
from to increment
from upto
from upto steps

* bytecode vm design for guile
  https://www.gnu.org/software/guile/manual/html_node/Why-a-VM_003f.html#Why-a-VM_003f

  bytecode interpreter written in C



Compiled code is run by a virtual machine (VM). Each thread has its own VM. The virtual machine executes the sequence of instructions in a procedure.

Each VM instruction starts by indicating which operation it is, and then follows by encoding its source and destination operands. Each procedure declares that it has some number of local variables, including the function arguments. These local variables form the available operands of the procedure, and are accessed by index.

The local variables for a procedure are stored on a stack. Calling a procedure typically enlarges the stack, and returning from a procedure shrinks it. Stack memory is exclusive to the virtual machine that owns it.

In addition to their stacks, virtual machines also have access to the global memory (modules, global bindings, etc) that is shared among other parts of Guile, including other VMs.

The registers that a VM has are as follows:

ip - Instruction pointer
sp - Stack pointer
fp - Frame pointer
In other architectures, the instruction pointer is sometimes called the "program counter" (pc). This set of registers is pretty typical for virtual machines; their exact meanings in the context of Guile's VM are described in the next section.



  

* simple bytecode vm
  https://www.youtube.com/watch?v=8k5h-A7JaaE&t=6s&index=36&list=WL
  1:03:39

  a lot of the enums start at 128

  opcode_t
  push add sub mul div mod neg ret

  char bytecode_buffer[1024];
  char *bytecode = bytecode_buffer;

  emit(uint8 byte) {
    *bytecode++ = byte;
  }
  emit4(uint32 data) {
    *(uint32 *)bytecode = data;
    bytecode += 4;
  }

  ---------------------------------------------------------------------------

  bytecode interpreter

  char *ip;
  int execute_stack[1024];
  int *sp = execute_stack

  void execute() {
    for(;;) {
      int op = *ip++;
      switch (op) {
      PUSH:
        *sp++ = *(uint32 *)ip;
        ip += 4;
      ADD:
        sp[-2] += sp[-1];
        sp--;
        break;
        ....
      RET:
        // return whats on top of the stack
        return sp[-1];
      }
 
    }
  }


  test code:

  emit(PUSH)
  emit(1)
  emit(PUSH)
  emit(2)
  emit(ADD)
  emit(RET)


  char emit_buffer[1024];
  emit_pointer = emit_buffer;

  int frame[1024];
  int stack[1024];

  ip = emit_buffer;
  fp = frame;
  sp = stack

  int val = execute();




* vm links
  http://bartoszsypytkowski.com/simple-virtual-machine/

  https://github.com/munificent/wren
  http://wren.io/getting-started.html
  http://gameprogrammingpatterns.com/bytecode.html
  https://github.com/skx/simple.vm/tree/master/examples
  http://www.jucs.org/jucs_11_7/the_implementation_of_lua/jucs_11_7_1159_1176_defigueiredo.html
  http://smalltalk.gnu.org/files/vmspec.pdf
  http://stackoverflow.com/questions/20313122/generating-register-based-bytecode-from-an-abstract-syntax-tree
  http://hhvm.com/blog/6323/the-journey-of-a-thousand-bytecodes
  https://www.reddit.com/r/learnprogramming/comments/w6i0p/bytecode_execution_vs_ast_walking_speed/

* wren vm notes
  Unlike expressions, statements do not leave a value on the stack.


  wren_vm.c:
  initvm
    wrenconfiguration structure
    vm = wrenNewVM(configuration)
      symbol table init
      wrenInitializeCore                <<<-- wren_core.c
        define root Object class
        PRIMITIVE macro ?
        all the core primitives (keywords in seni?) have now been defined

  WrenInterpretResult result = wrenInterpret(vm, source); <<<-- vm.c
    WrenVM is passed around
    creates a 'main' module (in a tempRoot), creates a 'fiber' and runs interpreter with that fiber
      Value ???
      wrenStringFormat returns a large number
  is interpreter called twice? first for core module then for the user specified main module?
  loadModule calls wrenCompile
  
  wrenCompile <<<<-- wren_compiler.c
    lexer parser etc
    

  static WrenInterpretResult runInterpreter(WrenVM* vm, register ObjFiber* fiber) <<<<<-- wren_vm.c

  definition(compiler)
  statement(compiler)
  expression(compiler)
  literal(compiler, canAssign)
  emitConstant

  WREN_NAN_TAGGING - if not defined this makes debugging easier as Value has a type and num structure

** wren analysis scratch notes
 >	wren_d.exe!emitOp(sCompiler * compiler, Code instruction) Line 1171	C
 	 wren_d.exe!emitShortArg(sCompiler * compiler, Code instruction, int arg) Line 1200	C
 	 wren_d.exe!emitConstant(sCompiler * compiler, unsigned __int64 value) Line 1221	C
 	 wren_d.exe!literal(sCompiler * compiler, bool canAssign) Line 2267	C
 	 wren_d.exe!parsePrecedence(sCompiler * compiler, Precedence precedence) Line 2680	C
 	 wren_d.exe!infixOp(sCompiler * compiler, bool canAssign) Line 2434	C
 	 wren_d.exe!parsePrecedence(sCompiler * compiler, Precedence precedence) Line 2686	C
 	 wren_d.exe!expression(sCompiler * compiler) Line 2694	C
 	 wren_d.exe!forStatement(sCompiler * compiler) Line 2905	C
 	 wren_d.exe!statement(sCompiler * compiler) Line 2992	C
 	 wren_d.exe!definition(sCompiler * compiler) Line 3421	C
 	 wren_d.exe!wrenCompile(WrenVM * vm, ObjModule * module, const char * source, bool isExpression, bool printErrors) Line 3468	C
 	 wren_d.exe!loadModule(WrenVM * vm, unsigned __int64 name, const char * source) Line 490	C
 	 wren_d.exe!wrenInterpretInModule(WrenVM * vm, const char * module, const char * source) Line 1328	C
 	 wren_d.exe!wrenInterpret(WrenVM * vm, const char * source) Line 1315	C
 	 wren_d.exe!runFile(const char * path) Line 232	C






   when compiling user code set a breakpoint on emitOp wren_compiler.c 1170

   System.print("hello from isg")
   for (i in 1..10) System.print("Counting up %(i)")

   instruction	CODE_LOAD_MODULE_VAR (17)	Code
   instruction	CODE_CONSTANT (0)	Code
	 instruction	CODE_CALL_1 (25)	Code
	 instruction	CODE_POP (23)	Code
	 instruction	CODE_CONSTANT (0)	Code
	 instruction	CODE_CONSTANT (0)	Code
	 instruction	CODE_CALL_1 (25)	Code
	 instruction	CODE_NULL (1)	Code
	 instruction	CODE_LOAD_LOCAL_0 (4)	Code
	 instruction	CODE_LOAD_LOCAL_1 (5)	Code
	 instruction	CODE_CALL_1 (25)	Code
	 instruction	CODE_STORE_LOCAL (14)	Code
	 instruction	CODE_JUMP_IF (60)	Code
	 instruction	CODE_LOAD_LOCAL_0 (4)	Code
	 instruction	CODE_LOAD_LOCAL_1 (5)	Code
	 instruction	CODE_CALL_1 (25)	Code
	 instruction	CODE_LOAD_MODULE_VAR (17)	Code
	 instruction	CODE_LOAD_MODULE_VAR (17)	Code
	 instruction	CODE_CALL_0 (24)	Code
	 instruction	CODE_CONSTANT (0)	Code
	 instruction	CODE_CALL_1 (25)	Code
	 instruction	CODE_LOAD_LOCAL_2 (6)	Code
	 instruction	CODE_CALL_1 (25)	Code
	 instruction	CODE_CONSTANT (0)	Code
	 instruction	CODE_CALL_1 (25)	Code
	 instruction	CODE_CALL_0 (24)	Code
	 instruction	CODE_CALL_1 (25)	Code
	 instruction	CODE_POP (23)	Code
	 instruction	CODE_LOOP (59)	Code



** wren build shenanigans

 Build Events -> Command Line had the following pasted in:

 python ../../libuv.py download
 python ../../libuv.py build -32

* timings

<2017-05-07 Sun>

A. full run but with SUB popping the stack

Eval Time taken 2 seconds 568 milliseconds
VM Time taken 2 seconds 986 milliseconds


--------------------------------------------------------------------------------

B. early return from vm_interpret

Eval Time taken 2 seconds 568 milliseconds
VM Time taken 0 seconds 0 milliseconds

--------------------------------------------------------------------------------

C. replacing safe_var_move with simpler dest.value.i = src.value.i

Eval Time taken 2 seconds 570 milliseconds
VM Time taken 2 seconds 945 milliseconds

--------------------------------------------------------------------------------

D. keeping a local variable indicating stack position and doing simple pointer increment/decrements

Eval Time taken 2 seconds 568 milliseconds
VM Time taken 1 seconds 552 milliseconds

--------------------------------------------------------------------------------

E. C + D

Eval Time taken 2 seconds 568 milliseconds
VM Time taken 1 seconds 502 milliseconds

--------------------------------------------------------------------------------

F. D + using 'register' keyword on commonly accessed variables in interpreter loop

Eval Time taken 2 seconds 665 milliseconds
VM Time taken 0 seconds 759 milliseconds

(/ 2665.0 759)
3.5111989459815547

* looking up arguments during bytecode execution

given:

(fn (something alpha: 10 beta: 20)
    (+ alpha beta))

assuming that the wlut values are:

| something | 42 |
| alpha     | 53 |
| beta      | 67 |

the MEM_SEG_ARGUMENT memory will be:

| 0 | 53 |
| 1 | 10 |
| 2 | 67 |
| 3 | 20 |

the fn_info->argument_offsets array would be:

| 0 | 53 |
| 1 | 67 |

then:
// finding argument location of 'beta':

index = get_argument_mapping(fn_info, 67); // returns 1
index_into_arguments_memory = (index * 2) + 1

--------------------------------------------------------------------------------

invoking a function would involve:
1. setting up the ARG memory with the default arguments given in the function signature (CALL_PREP ???)
2. overwriting particular values with those from the invocation (RET followed by PUSH/POP to change arg mem)
3. actually calling the function (CALL straight into function body, followed by RET)

fn_info would then have 2 addresses - 1 for setting up args, the other for the body

* bytecode sequence when calling functions


  (fn (adder a: 9 b: 8) (+ a b)) (adder a: 5 b: 3)

  0       JUMP    +14
  1       PUSH    CONST   1
  2       POP     ARG     0
  3       PUSH    CONST   9
  4       POP     ARG     1
  5       PUSH    CONST   2
  6       POP     ARG     2
  7       PUSH    CONST   8
  8       POP     ARG     3
  9       RET_0
  10      PUSH    ARG     1
  11      PUSH    ARG     3
  12      ADD
  13      RET
  14      CALL    1       2
  15      PUSH    CONST   5
  16      POP     ARG     1
  17      PUSH    CONST   3
  18      POP     ARG     3
  19      CALL_0 10      2
  20      STOP


  calling a function involves the following sequence being executed:
  (KF == Keep Frame)

  CALL      Pushes a frame onto the stack and jumps to the given ip
  RET_0     Returns to the ip stored in the frame pointer on the stack without popping the frame
  CALL_0    Jumps to the given ip without pushing a new frame (it does modify the ip on the frame 
            so that execution will return to the correct location at the next RET)
  RET       Returns to the ip stored in the frame pointer on the stack and pops the current frame


  This way, invoking a function results in the following:
  1. There are some empty pushes onto the stack in order to make room for all the named arguments
  2. A frame is pushed onto the stack
  3. The empty pushes from (1) are filled in with default values
  4. RET_0 moves the ip back to the calling code which can then override the default values
  5. CALL_0 moves the ip into the body of the called function, retaining the current frame
  6. The body is executed
  7. RET pops the frame and copies the last value from the function onto the current stack

  a flaw in this scheme is that LOCAL will now reference the new frame created 
  after CALL and nothing will be found e.g.

  17      CALL    1       1    <<<< - creates a new frame
  18      PUSH    LOCAL   0    <<<< - so now 'LOCAL' doesn't reference what you think it should
  19      DEC_RC  ARG     1
  20      POP     ARG     1
  21      INC_RC  ARG     1
  22      CALL_0  6       1



  another thing to note are the DEC_RC and INC_RC opcodes. These ensure that default arguments 
  which are vectors and will be overidden by the calling code will have their reference counts 
  correctly altered

  17      CALL    1       1    
  18      PUSH    LOCAL   0    
  19      DEC_RC  ARG     1    <<<< - decrement the reference count for the default argument
  20      POP     ARG     1
  21      INC_RC  ARG     1    <<<< - increment the caller supplied argument
  22      CALL_0  6       1
  

* frame structure


  ^^^ stack grows upwards
  ------------- <- sp of new frame
  locals (10)
  num_args
  IP
  FP
  args (n * 2)
  ------------- <- sp of previous frame
  ...
  ...

  after a function returns, the frame is popped and the sp has increased by one as it holds the return value from the function








* seni_var holding 4floats
  problems:
  1. seni_var holds a reference to a colour that's been allocated from the colour_slab. I've realised that to properly manage this we'll need to reference count VAR_COLOUR
  2. there are a _lot_ of seni_var heap allocations taking place. This is because _every_ 2d vector involves using seni_vars from the heap.
  

  solution:
  seni_var should hold 4 floats: 'f32_array' in addition to it's value union
  these 4 floats can be used to represent:
  - a colour (type == VAR_COLOUR, value.i == format, f32_array == components)
  - a 2d vector (type == VAR_2D, f32_array == x,y)
  - a quaternion (type == VAR_QUATERNION, f32_array == x,y,z,w)
  - etc etc etc

    the colour slab can be removed and there'll be no need to reference count colours since the safe_move, safe_copy, etc functions will also copy the f32_array

    nth will need to be refactored so that it looks into f32_array when given a VAR_2D
    append will need to be looked at (will any conversions be required?)
