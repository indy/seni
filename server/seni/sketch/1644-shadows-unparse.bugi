(image linear-colour-space: 1)


(define
  data (vector))

;; create a bunch of positions around the origin
(define
  random-axis-position (prng/range seed: 42 min: -500 max: 500)
  col-fn (col/procedural-fn preset: "robocop" ~
  (gen/select from: col/procedural-fn-presets))
  random-radius (prng/range seed: 42 min: 2 max: 30))

(loop (x to: 800)
  (define
    x-pos (random-axis-position)
    y-pos (random-axis-position)
    dist (math/distance vec1: [x-pos y-pos] vec2: [0 0])
    colour (col-fn t: (/ dist 500))
    radius (random-radius))
  (++ data [x-pos y-pos colour radius]))


(fn (draw-shape position: [0 0]
                colour: red
                radius: 10)
  (circle position: position
          colour: colour
          radius: radius
          tessellation: 20))

(fn (draw-body obj: [])
  (define
    position [(vector/get from: obj nth: 0)
              (vector/get from: obj nth: 1)]
    colour: (vector/get from: obj nth: 2)
    radius: (vector/get from: obj nth: 3))
  (draw-shape position: position
              colour: colour
              radius: radius))

(fn (draw-shadow obj: [])
  (define
    position [(* (vector/get from: obj nth: 0) 1.05)
              (* (vector/get from: obj nth: 1) 1.05)]
    colour: (col/set-alpha from: (vector/get from: obj nth: 2) value: 0.2)
    radius: (vector/get from: obj nth: 3))
  (draw-shape position: position
              colour: colour
              radius: radius))

(on-matrix-stack
  (translate vector: [500 500])
  (map fn: draw-shadow
       vector: data
       bind: 'obj)
  (map fn: draw-body
       vector: data
       bind: 'obj))
