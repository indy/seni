(meta linear-colour-space: 1)


(define
  data (vector))

;; create a bunch of positions around the origin
(define
  random-axis-position (prng/range seed: 42 min: -500 max: 500)
  col-fn (col/procedural-fn preset: "mars" ~
                            (gen/select from: col/procedural-fn-presets))
  random-radius (prng/range seed: 42 min: 2 max: 30))

(loop (x to: 800)
  (define
    x-pos (random-axis-position)
    y-pos (random-axis-position)
    dist (math/distance vec1: [x-pos y-pos] vec2: [0 0])
    colour (col-fn t: (/ dist 500))
    radius (random-radius))
  (++ data [x-pos y-pos colour radius]))

(fn (draw-bg obj: [])
  (define
    [x y colour radius] obj)
  (circle position: [x y]
          colour: (col/set-alpha from: colour
                                 value: 0.267 ~ (gen/scalar min: 0 max: 0.4))
          radius: (* radius 6 ~ (gen/int min: 1 max: 8))
          tessellation: 20))

(fn (draw-body obj: [])
  (define
    [x y colour radius] obj)
  (circle position: [x y]
          colour: colour
          radius: radius
          tessellation: 20))

(fn (draw-shadow obj: [])
  (define
    [x y colour radius] obj
    offset 1.116 ~ (gen/scalar min: 1 max: 2))
  (circle position: [(* x offset) (* y offset)]
          colour: (col/set-alpha from: (col/darken from: colour
                                                   value: 27 ~ (gen/int min: 0 max: 100))
                                 value: 0.236 ~ (gen/scalar max: 0.5))
          radius: radius
          tessellation: 20))

(on-matrix-stack
  (translate vector: [500 500])
  (map fn: draw-bg obj: data)
  (map fn: draw-shadow obj: data)
  (map fn: draw-body obj: data))
