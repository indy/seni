(image linear-colour-space: 1)


;; boxes to compare colour transitions

(define
  left-x 100
  right-x 900
  width 95
  height 100

  left-rgb {(col/rgb r: 0.9 g: 1.0 b: 0 alpha: 1) (gen/col alpha: 1)}
  right-rgb {(col/rgb r: 0.1 g: 0.0 b: 1 alpha: 1) (gen/col alpha: 1)}

  left-hsluv (col/convert from: left-rgb format: HSLuv)
  right-hsluv (col/convert from: right-rgb format: HSLuv)
  interp-hsluv-h (interp/build from: [left-x right-x] to: [(col/e0 from: left-hsluv) (col/e0 from: right-hsluv)])
  interp-hsluv-s (interp/build from: [left-x right-x] to: [(col/e1 from: left-hsluv) (col/e1 from: right-hsluv)])
  interp-hsluv-l (interp/build from: [left-x right-x] to: [(col/e2 from: left-hsluv) (col/e2 from: right-hsluv)])

  left-hsl (col/convert from: left-rgb format: HSL)
  right-hsl (col/convert from: right-rgb format: HSL)
  interp-hsl-h (interp/build from: [left-x right-x] to: [(col/e0 from: left-hsl) (col/e0 from: right-hsl)])
  interp-hsl-s (interp/build from: [left-x right-x] to: [(col/e1 from: left-hsl) (col/e1 from: right-hsl)])
  interp-hsl-l (interp/build from: [left-x right-x] to: [(col/e2 from: left-hsl) (col/e2 from: right-hsl)])

  left-hsv (col/convert from: left-rgb format: HSV)
  right-hsv (col/convert from: right-rgb format: HSV)
  interp-hsv-h (interp/build from: [left-x right-x] to: [(col/e0 from: left-hsv) (col/e0 from: right-hsv)])
  interp-hsv-s (interp/build from: [left-x right-x] to: [(col/e1 from: left-hsv) (col/e1 from: right-hsv)])
  interp-hsv-v (interp/build from: [left-x right-x] to: [(col/e2 from: left-hsv) (col/e2 from: right-hsv)])


  left-lab (col/convert from: left-rgb format: LAB)
  right-lab (col/convert from: right-rgb format: LAB)
  interp-lab-l (interp/build from: [left-x right-x] to: [(col/e2 from: left-lab) (col/e2 from: right-lab)])
  interp-lab-a (interp/build from: [left-x right-x] to: [(col/e1 from: left-lab) (col/e1 from: right-lab)])
  interp-lab-b (interp/build from: [left-x right-x] to: [(col/e2 from: left-lab) (col/e2 from: right-lab)]))

(fence (x from: left-x to: right-x num: 9)
  (debug/print value: x)
  (rect position: [x 610]
        width: width
        height: height
        colour: (col/hsluv h: (interp/value from: interp-hsluv-h t: x)
                           s: (interp/value from: interp-hsluv-s t: x)
                           l: (interp/value from: interp-hsluv-l t: x)))
  (rect position: [x 500]
        width: width
        height: height
        colour: (col/hsl h: (interp/value from: interp-hsl-h t: x)
                         s: (interp/value from: interp-hsl-s t: x)
                         l: (interp/value from: interp-hsl-l t: x)))
  (rect position: [x 390]
        width: width
        height: height
        colour: (col/hsv h: (interp/value from: interp-hsv-h t: x)
                         s: (interp/value from: interp-hsv-s t: x)
                         v: (interp/value from: interp-hsv-v t: x)))
  (rect position: [x 280]
        width: width
        height: height
        colour: (col/lab l: (interp/value from: interp-lab-l t: x)
                         a: (interp/value from: interp-lab-a t: x)
                         b: (interp/value from: interp-lab-b t: x))))

;; (fn (circ radius: 10 iterations: 20 s: 100 l: 50)
;;   (fence (angle from: 0 to: 360 num: iterations)
;;     (on-matrix-stack
;;       (rotate angle: angle)
;;       (rect position: [0 radius]
;;         width: 50
;;         height: 50
;;         colour: (col/hsluv h: angle s: s l: l)))))

;; (on-matrix-stack
;;   (translate vector: [500 500])
;;   (circ radius: 400
;;         iterations: 40
;;         s: 100
;;         l: 60))
