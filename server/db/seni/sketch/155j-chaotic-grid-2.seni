(image linear-colour-space: 1)


(render-background)
(render-main)

(define
  num-squares-to-render 15 ~ (gen/int min: 2 max: 20)
  gap-size 30 ~ (gen/int min: 5 max: 50)

  num-squares (+ 2 num-squares-to-render)
  num-gaps (+ num-squares 1)
  square-size (/ (- canvas/width (* gap-size num-gaps)) num-squares)

  base-colour (col/rgb r: 1.0 ~ (gen/scalar)
                       g: 0.0 ~ (gen/scalar)
                       b: 0.3 ~ (gen/scalar)
                       alpha: 1.0)
  colour-volatility 20 ~ (gen/int min: 2 max: 40)

  focal-point (focal/build-point position: [500 ~ (gen/int max: canvas/width)
                                                800 ~ (gen/int max: canvas/height)]
                                 distance: 300 ~ (gen/int max: canvas/width))
  focal-power 50 ~ (gen/scalar max: 200))

(fn (render-background colour: (col/rgb r: 1.0 g: 1.0 b: 0.9))
    (rect position: canvas/centre
          width: canvas/width
          height: canvas/height
          colour: colour))

(fn (map-to-position at: 0)
  (+ (* (+ gap-size square-size) at) (/ square-size 2) gap-size))

(fn (render-main)
  (loop (y from: 1 to:  (- num-squares 1))
    (loop (x from: 1 to:  (- num-squares 1))
      (define
        p [(map-to-position at: x) (map-to-position at: y)]
        volatility (* (focal/value from: focal-point position: p) focal-power))
      (stroked-bezier-rect position: p
                           width: square-size
                           height: square-size
                           seed: (+ x (* y num-squares))
                           colour: base-colour
                           colour-volatility: colour-volatility
                           volatility: volatility
                           iterations: 39
                           tessellation: 1
                           overlap: 0
                           stroke-noise: 0))))
