(wash colour:  {(col/rgb r: 0.512 g: 0.856 b: 0.868 alpha: 0.340) (gen/col)})
(tri-hsl alpha: {0.148 (gen/scalar)})
(tri-lab alpha: {0.688 (gen/scalar)})

(define
  w {47 (gen/int min: 20 max: 200)}
  h {104 (gen/int min: 20 max: 200)})

(fn (tri-lab alpha: 1)
  (define 
    r (prng/range)
    colour-scale {807 (gen/int max: 900)}
    colour-offset (prng/range min: -1 max: 1)
    li (interp/fn from: [0 1]
                  to: [{11 (gen/int min: 0 max: 120)} 
                       {69 (gen/int min: 0 max: 120)}])
    rma (interp/fn from: [0 canvas/width]
                   to: [{48 (gen/int min: -100 max: 100)} 
                        {-40 (gen/int min: -100 max: 100)}])
    rmb (interp/fn from: [0 canvas/height]
                   to: [{58 (gen/int min: -120 max: 120)}
                        {53 (gen/int min: -120 max: 120)}]))
  
  (loop (y from: 0 upto: canvas/height increment: 100)
    (loop (x from: 0 to: canvas/width increment: (* 2 w))
      (define 
        b (rmb val: (+ y (* (colour-offset) colour-scale)))
        col-1 (col/lab l: (li val: (r))
                       a: (rma val: (+ x (* (colour-offset) colour-scale)))
                       b: b
                       alpha: alpha)
        col-2 (col/lab l: (li val: (r))
                       a: (rma val: (+ x w (* (colour-offset) colour-scale)))
                       b: b
                       alpha: alpha))
      (poly coords: [[(+ x 0) (+ y h h)]
                     [(+ x w) (+ y h)]
                     [(+ x 0) (+ y 0)]
                     [(+ x w) (- y h)]]
            colours: [col-1 col-1 col-1 col-1])
      (poly coords: [[(+ x w w) (+ y h h)]
                     [(+ x w) (+ y h)]
                     [(+ x w w) (+ y 0)]
                     [(+ x w) (- y h)]]
            colours: [col-2 col-2 col-2 col-2]))))

(fn (tri-hsl alpha: 1)
  (define 
    colour-scale {306 (gen/int max: 900)}
    colour-offset (prng/range min: -1 max: 1)
    fn-h (interp/fn from: [0 canvas/width]
                    to: [{5 (gen/int max: 360)}
                         {281 (gen/int max: 360)}])
    fn-l (interp/fn from: [0 canvas/height]
                    to: [{0.224 (gen/scalar min: 0.2 max: 0.5)} 
                         {0.578 (gen/scalar min: 0.4 max: 1)}]))

  (loop (y from: 0 upto: canvas/height increment: 100)
    (loop (x from: 0 to: canvas/width increment: (* 2 w))
      (define 
        b  (fn-l val: (+ y (* (colour-offset) colour-scale)))
        col-1 (col/hsl h: (fn-h val: (+ x (* (colour-offset) colour-scale)))
                       s: 1 l: b alpha: alpha)
        col-2 (col/hsl h: (fn-h val: (+ x w (* (colour-offset) colour-scale)))
                       s: 1 l: b alpha: alpha))
      (poly coords: [[(+ x 0) (+ y h h)]
                     [(+ x w) (+ y h)]
                     [(+ x 0) (+ y 0)]
                     [(+ x w) (- y h)]]
            colours: [col-1 col-1 col-1 col-1])
      (poly coords: [[(+ x w w) (+ y h h)]
                     [(+ x w) (+ y h)]
                     [(+ x w w) (+ y 0)]
                     [(+ x w) (- y h)]]
            colours: [col-2 col-2 col-2 col-2]))))


(fn (wash variation: 200
          line-width: 70
          line-segments: 5
          colour: (col/rgb r: 0.627 g: 0.627 b: 0.627 alpha: 0.4)
          seed: 272)

  (fn (v x: 0 y: 0 z: 0 scale: 1)
    (+ y (* scale (prng/perlin-signed x: x y: y z: z))))

  (define 
    w/3 (/ canvas/width 3)
    h/3 (/ canvas/height 3))
  (loop (h from: -20 to: 1020 increment: 20)
    (bezier tessellation: line-segments
            line-width: line-width
            coords: [[0 (v x: 0 y: h z: seed scale: variation)]
                     [w/3 (v x: w/3 y: h z: seed scale: variation)]
                     [(* w/3 2) (v x: (* w/3 2) y: h z: seed scale: variation)]
                     [canvas/width (v x: canvas/width y: h z: seed scale: variation)]]
            colour: colour)

    (bezier tessellation: line-segments
            line-width: line-width
            coords: [[(v x: 0 y: h z: seed scale: variation) 0]
                     [(v x: h/3 y: h z: seed scale: variation) h/3]
                     [(v x: (* h/3 2) y: h z: seed scale: variation) (* h/3 2)]
                     [(v x: canvas/height y: h z: seed scale: variation) canvas/height]]
            colour: colour)))
