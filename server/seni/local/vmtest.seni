;; some of the interp functions accept defining parameters as well as a 't' value
;; but interp/build returns a structure that's used by interp/values and interp/value

;; generally any function that returns a structure will be called build and  have a complimentary function called 'value' to return a value

;; some other functions like path/* take functions

;; all path/* functions should take a mapping

(define
  dest-curve {[[800 100] [600 200] [700 300] [800 500]] (gen/2d min: 0 max: 1000)}
  )

;;(curves-to-curve f: (address-of pass-debug))
(curves-to-curve f: (address-of pass-background-bubbles)
                 dest-curve: dest-curve)
(curves-to-curve f: (address-of pass-background-curves)
                 dest-curve: dest-curve)
(curves-to-curve f: (address-of pass-foreground-curves)
                 dest-curve: dest-curve)
(curves-to-curve f: (address-of pass-foreground-bubbles)
                 dest-curve: dest-curve)


(fn (background-bubble position: [0 0] t: 0)
    (circle position: position
            radius: 10
            colour: red))

(fn (pass-background-bubbles curve: [[100 100] [200 200] [300 300] [400 400]]
                             curves-in-piece: 1
                             curve-id: 1)
    ;; (define
    ;;   rng (prng/build seed: (+ curve-id (nth from: (nth from: curve n: 0) n: 0)))
    ;;   p (prng/value from: rng))
    (path/bezier coords: curve
                 steps: 10
                 fn: (address-of background-bubble)
                 mapping: ease/cubic-out))

(fn (pass-background-curves curve: [[100 100] [200 200] [300 300] [400 400]]
                            curves-in-piece: 1
                            curve-id: 1)
    (bezier coords: curve
            line-width: 15
            colour: green
            tessellation: 50))

(fn (pass-foreground-curves curve: [[100 100] [200 200] [300 300] [400 400]]
                            curves-in-piece: 1
                            curve-id: 1)
    (bezier coords: curve
            line-width: 5
            colour: blue
            tessellation: 50))

(fn (pass-debug curve: [[100 100] [200 200] [300 300] [400 400]]
                curves-in-piece: 1
                curve-id: 1)
    (circle position: (nth from: curve n: 1)
            radius: 30
            colour: (col/rgb r: 1.0 b: 1.0 alpha: 0.2))
    (circle position: (nth from: curve n: 2)
            radius: 30
            colour: (col/rgb r: 1.0 g: 1.0 alpha: 0.2))
    (line from: (nth from: curve n: 0)
          to: (nth from: curve n: 3)
          colour: (col/rgb r: 0.4 alpha: 0.1)
          width: 10))

(fn (foreground-bubble position: [0 0] t: 0)
    (circle position: position
            radius: 100
            colour: (col/rgb r: 0.9 alpha: 0.03)))

(fn (pass-foreground-bubbles curve: [[100 100] [200 200] [300 300] [400 400]]
                             curves-in-piece: 1
                             curve-id: 1)
    (path/bezier coords: curve
                 steps: 10
                 fn: (address-of foreground-bubble)
                 mapping: ease/cubic-out))


;; bezier curves that all end on a pre-defined curve
(fn (curves-to-curve seed: 123
                     source-pos: [200 500]
                     source-size: 18
                     dest-curve: [[800 100] [600 200] [700 300] [800 500]]
                     num-curves: 11
                     f: 1)
  (define
    half-source-size (/ source-size 2)
    source-rng (prng/build min: (* half-source-size -1) max: half-source-size seed: seed)
    remap (interp/build from: [0 (- num-curves 1)] to: [0 1]))
  (loop (i to: num-curves)
    (define
      t (interp/value from: remap t: i)
      pa [(+ (nth from: source-pos n: 0) (prng/value from: source-rng))
          (+ (nth from: source-pos n: 1) (prng/value from: source-rng))]

      pd (interp/bezier coords: dest-curve t: t)

      norm (math/normal vec1: pa vec2: pd)
      pb (interp/ray point: (interp/line from: pa to: pd t: 0.333)
                      direction: norm t: 150)
      pc (interp/ray point: (interp/line from: pa to: pd t: 0.666)
                     direction: norm t: -150))

    ;; (rect position: source-pos
    ;;       width: source-size
    ;;       height: source-size
    ;;       colour: (col/rgb g: 1.0 alpha: 0.2))

    (fn-call (f curve: [pa pb pc pd]
                curves-in-piece: num-curves
                curve-id: i
                ))))
