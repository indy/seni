(image linear-colour-space: 1)


(define
  coords1 [[33.232 184.802]
            [374.787 455.302]
            [-53.755 -68.526]
            [-430.293 -266.600]]
  coords2 [[-105.161 467.990]
            [298.991 -415.687]
            [-161.546 451.565]
            [174.591 -229.921]]
  coords3 [[75.160 185.500]
            [-119.952 393.863]
            [-470.493 -51.739]
            [-434.452 -163.107]]

  col-fn-1 (col/build-procedural preset: chrome
                                 alpha: 0.08)
  col-fn-2 (col/build-procedural preset: robocop
                                 alpha: 0.08)
  col-fn-3 (col/build-procedural preset: mars
                                 alpha: 0.08)

  num-copies 9
  squish (interp/build from: [0 (- num-copies 1)] to: [1.2 1.79]))

(fn (draw angle: 0 copy: 0)
  (scale vector: [(interp/value from: squish t: copy) (interp/value from: squish t: copy)])
  (fence (t num: 200)
    (poly coords: [(interp/bezier t: t coords: coords1)
                   (interp/bezier t: t coords: coords2)
                   (interp/bezier t: t coords: coords3)]
          colours: [(col/value from: col-fn-1 t: t)
                    (col/value from: col-fn-2 t: t)
                    (col/value from: col-fn-3 t: t)])))

(fn (render)
  (rect position: [500 500]
        width: 1000
        height: 1000
        colour: (col/value from: col-fn-1 t: 0.5))
  (on-matrix-stack
    (translate vector: canvas/centre)
    (scale vector: [0.8 0.8])
    (repeat/rotate-mirrored fn: (address-of draw)
                            copies: num-copies)))

(render)
